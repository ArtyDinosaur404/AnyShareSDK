/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// 参见condition、value、lvalue、rvalue 注：createtime与modifytime同时出现在搜索条件中时，会是\&quot;或\&quot;的关系，其余所有过滤条件都是\&quot;与\&quot;；文件夹无修改时间；时间格式同创建时间；
    /// </summary>
    [DataContract]
    public partial class SearchSearchReqModifytime :  IEquatable<SearchSearchReqModifytime>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchSearchReqModifytime" /> class.
        /// </summary>
        /// <param name="condition">自定义属性搜索条件，customattr内每个对象必须有condition，可以为：  “&#x3D;”，需要给出value  “&gt;”，需要给出value  “&lt;”，需要给出value  “[]”，需要给出lvalue，rvalue，搜索符合 [lvalue, rvalue] 范围内的记录  .</param>
        /// <param name="value">自定义属性搜索关键词id或数值，condition为“&#x3D;”、 “&gt;”、 “&lt;”时需要该项值.</param>
        /// <param name="lvalue">自定义属性搜索数值，condition为”[]”时需要该项值.</param>
        /// <param name="rvalue">自定义属性搜索数值，condition为”[]”时需要该项值.</param>
        public SearchSearchReqModifytime(string condition = default(string), long? value = default(long?), long? lvalue = default(long?), long? rvalue = default(long?))
        {
            this.Condition = condition;
            this.Value = value;
            this.Lvalue = lvalue;
            this.Rvalue = rvalue;
        }
        
        /// <summary>
        /// 自定义属性搜索条件，customattr内每个对象必须有condition，可以为：  “&#x3D;”，需要给出value  “&gt;”，需要给出value  “&lt;”，需要给出value  “[]”，需要给出lvalue，rvalue，搜索符合 [lvalue, rvalue] 范围内的记录  
        /// </summary>
        /// <value>自定义属性搜索条件，customattr内每个对象必须有condition，可以为：  “&#x3D;”，需要给出value  “&gt;”，需要给出value  “&lt;”，需要给出value  “[]”，需要给出lvalue，rvalue，搜索符合 [lvalue, rvalue] 范围内的记录  </value>
        [DataMember(Name="condition", EmitDefaultValue=false)]
        public string Condition { get; set; }

        /// <summary>
        /// 自定义属性搜索关键词id或数值，condition为“&#x3D;”、 “&gt;”、 “&lt;”时需要该项值
        /// </summary>
        /// <value>自定义属性搜索关键词id或数值，condition为“&#x3D;”、 “&gt;”、 “&lt;”时需要该项值</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public long? Value { get; set; }

        /// <summary>
        /// 自定义属性搜索数值，condition为”[]”时需要该项值
        /// </summary>
        /// <value>自定义属性搜索数值，condition为”[]”时需要该项值</value>
        [DataMember(Name="lvalue", EmitDefaultValue=false)]
        public long? Lvalue { get; set; }

        /// <summary>
        /// 自定义属性搜索数值，condition为”[]”时需要该项值
        /// </summary>
        /// <value>自定义属性搜索数值，condition为”[]”时需要该项值</value>
        [DataMember(Name="rvalue", EmitDefaultValue=false)]
        public long? Rvalue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchSearchReqModifytime {\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Lvalue: ").Append(Lvalue).Append("\n");
            sb.Append("  Rvalue: ").Append(Rvalue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchSearchReqModifytime);
        }

        /// <summary>
        /// Returns true if SearchSearchReqModifytime instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchSearchReqModifytime to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchSearchReqModifytime input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Condition == input.Condition ||
                    (this.Condition != null &&
                    this.Condition.Equals(input.Condition))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Lvalue == input.Lvalue ||
                    (this.Lvalue != null &&
                    this.Lvalue.Equals(input.Lvalue))
                ) && 
                (
                    this.Rvalue == input.Rvalue ||
                    (this.Rvalue != null &&
                    this.Rvalue.Equals(input.Rvalue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Condition != null)
                    hashCode = hashCode * 59 + this.Condition.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Lvalue != null)
                    hashCode = hashCode * 59 + this.Lvalue.GetHashCode();
                if (this.Rvalue != null)
                    hashCode = hashCode * 59 + this.Rvalue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
