/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// DirSizeRes
    /// </summary>
    [DataContract]
    public partial class DirSizeRes :  IEquatable<DirSizeRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DirSizeRes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DirSizeRes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DirSizeRes" /> class.
        /// </summary>
        /// <param name="dirnum">总目录数 (required).</param>
        /// <param name="filenum">总文件数 (required).</param>
        /// <param name="recyclesize">回收站大小，如果docid不为CID或者回收站对象的gns，recyclesize返回-1 (required).</param>
        /// <param name="totalsize">总大小 (required).</param>
        public DirSizeRes(long? dirnum = default(long?), long? filenum = default(long?), long? recyclesize = default(long?), long? totalsize = default(long?))
        {
            this.Dirnum = dirnum;
            this.Filenum = filenum;
            this.Recyclesize = recyclesize;
            this.Totalsize = totalsize;
        }
        
        /// <summary>
        /// 总目录数
        /// </summary>
        /// <value>总目录数</value>
        [DataMember(Name="dirnum", EmitDefaultValue=false)]
        public long? Dirnum { get; set; }

        /// <summary>
        /// 总文件数
        /// </summary>
        /// <value>总文件数</value>
        [DataMember(Name="filenum", EmitDefaultValue=false)]
        public long? Filenum { get; set; }

        /// <summary>
        /// 回收站大小，如果docid不为CID或者回收站对象的gns，recyclesize返回-1
        /// </summary>
        /// <value>回收站大小，如果docid不为CID或者回收站对象的gns，recyclesize返回-1</value>
        [DataMember(Name="recyclesize", EmitDefaultValue=false)]
        public long? Recyclesize { get; set; }

        /// <summary>
        /// 总大小
        /// </summary>
        /// <value>总大小</value>
        [DataMember(Name="totalsize", EmitDefaultValue=false)]
        public long? Totalsize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DirSizeRes {\n");
            sb.Append("  Dirnum: ").Append(Dirnum).Append("\n");
            sb.Append("  Filenum: ").Append(Filenum).Append("\n");
            sb.Append("  Recyclesize: ").Append(Recyclesize).Append("\n");
            sb.Append("  Totalsize: ").Append(Totalsize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DirSizeRes);
        }

        /// <summary>
        /// Returns true if DirSizeRes instances are equal
        /// </summary>
        /// <param name="input">Instance of DirSizeRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirSizeRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dirnum == input.Dirnum ||
                    (this.Dirnum != null &&
                    this.Dirnum.Equals(input.Dirnum))
                ) && 
                (
                    this.Filenum == input.Filenum ||
                    (this.Filenum != null &&
                    this.Filenum.Equals(input.Filenum))
                ) && 
                (
                    this.Recyclesize == input.Recyclesize ||
                    (this.Recyclesize != null &&
                    this.Recyclesize.Equals(input.Recyclesize))
                ) && 
                (
                    this.Totalsize == input.Totalsize ||
                    (this.Totalsize != null &&
                    this.Totalsize.Equals(input.Totalsize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dirnum != null)
                    hashCode = hashCode * 59 + this.Dirnum.GetHashCode();
                if (this.Filenum != null)
                    hashCode = hashCode * 59 + this.Filenum.GetHashCode();
                if (this.Recyclesize != null)
                    hashCode = hashCode * 59 + this.Recyclesize.GetHashCode();
                if (this.Totalsize != null)
                    hashCode = hashCode * 59 + this.Totalsize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
