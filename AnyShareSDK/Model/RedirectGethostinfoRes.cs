/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// RedirectGethostinfoRes
    /// </summary>
    [DataContract]
    public partial class RedirectGethostinfoRes :  IEquatable<RedirectGethostinfoRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectGethostinfoRes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RedirectGethostinfoRes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectGethostinfoRes" /> class.
        /// </summary>
        /// <param name="host">系统对外的域名或ip (required).</param>
        /// <param name="name">系统对外的站点名称 (required).</param>
        /// <param name="port">http端口：  1. 0918版本之前的客户端使用该端口进行下载客户端  2. 10xx后续的服务器使用该端口来访问视频播放服务 (required).</param>
        /// <param name="httpsPort">Web client的服务端口，采用https (required).</param>
        public RedirectGethostinfoRes(string host = default(string), string name = default(string), long? port = default(long?), long? httpsPort = default(long?))
        {
            this.Host = host;
            this.Name = name;
            this.Port = port;
            this.HttpsPort = httpsPort;
        }
        
        /// <summary>
        /// 系统对外的域名或ip
        /// </summary>
        /// <value>系统对外的域名或ip</value>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public string Host { get; set; }

        /// <summary>
        /// 系统对外的站点名称
        /// </summary>
        /// <value>系统对外的站点名称</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// http端口：  1. 0918版本之前的客户端使用该端口进行下载客户端  2. 10xx后续的服务器使用该端口来访问视频播放服务
        /// </summary>
        /// <value>http端口：  1. 0918版本之前的客户端使用该端口进行下载客户端  2. 10xx后续的服务器使用该端口来访问视频播放服务</value>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public long? Port { get; set; }

        /// <summary>
        /// Web client的服务端口，采用https
        /// </summary>
        /// <value>Web client的服务端口，采用https</value>
        [DataMember(Name="https_port", EmitDefaultValue=false)]
        public long? HttpsPort { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RedirectGethostinfoRes {\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  HttpsPort: ").Append(HttpsPort).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RedirectGethostinfoRes);
        }

        /// <summary>
        /// Returns true if RedirectGethostinfoRes instances are equal
        /// </summary>
        /// <param name="input">Instance of RedirectGethostinfoRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RedirectGethostinfoRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.HttpsPort == input.HttpsPort ||
                    (this.HttpsPort != null &&
                    this.HttpsPort.Equals(input.HttpsPort))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.HttpsPort != null)
                    hashCode = hashCode * 59 + this.HttpsPort.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
