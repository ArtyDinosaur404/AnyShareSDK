/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// UserGetRes
    /// </summary>
    [DataContract]
    public partial class UserGetRes :  IEquatable<UserGetRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGetRes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserGetRes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGetRes" /> class.
        /// </summary>
        /// <param name="userid">用户唯一标识 (required).</param>
        /// <param name="account">用户登录账号 (required).</param>
        /// <param name="name">用户显示名 (required).</param>
        /// <param name="mail">用户邮箱地址 (required).</param>
        /// <param name="csflevel">用户密级，5~15 (required).</param>
        /// <param name="leakproofvalue">防泄密配置  0表示不允许打印，也不允许拷屏  1表示允许打印  2表示允许拷屏  3表示允许打印/拷屏 (required).</param>
        /// <param name="pwdcontrol">是否开启管控密码  1 表示开启  0 表示关闭 (required).</param>
        /// <param name="usertype">用户类型  1 表示本地用户  2 表示域用户  3 表示第三方认证用户 (required).</param>
        /// <param name="directdepinfos">用户的多个直属部门信息 (required).</param>
        /// <param name="needsecondauth">是否需要二次认证 (required).</param>
        /// <param name="freezestatus">冻结状态 true：冻结 false：未冻结 (required).</param>
        /// <param name="agreedtotermsofuse">同意使用协议状态 true：同意  false：未同意 (required).</param>
        /// <param name="ismanager">是否为组织管理员 (required).</param>
        /// <param name="telnumber">用户手机号 (required).</param>
        /// <param name="needrealnameauth">用户是否需实名认证 true：需要 false : 不需要 (required).</param>
        /// <param name="roletypes">所属角色，整数数组，每个整数表示不同的角色  1：表示文档审核员  [1] (required).</param>
        /// <param name="roleinfos">用户角色信息 (required).</param>
        public UserGetRes(string userid = default(string), string account = default(string), string name = default(string), string mail = default(string), long? csflevel = default(long?), long? leakproofvalue = default(long?), long? pwdcontrol = default(long?), long? usertype = default(long?), List<UserGetResDirectdeptinfo> directdepinfos = default(List<UserGetResDirectdeptinfo>), bool? needsecondauth = default(bool?), bool? freezestatus = default(bool?), bool? agreedtotermsofuse = default(bool?), bool? ismanager = default(bool?), string telnumber = default(string), bool? needrealnameauth = default(bool?), List<long?> roletypes = default(List<long?>), List<UserGetResRoleinfo> roleinfos = default(List<UserGetResRoleinfo>))
        {
            this.Userid = userid;
            this.Account = account;
            this.Name = name;
            this.Mail = mail;
            this.Csflevel = csflevel;
            this.Leakproofvalue = leakproofvalue;
            this.Pwdcontrol = pwdcontrol;
            this.Usertype = usertype;
            this.Directdepinfos = directdepinfos;
            this.Needsecondauth = needsecondauth;
            this.Freezestatus = freezestatus;
            this.Agreedtotermsofuse = agreedtotermsofuse;
            this.Ismanager = ismanager;
            this.Telnumber = telnumber;
            this.Needrealnameauth = needrealnameauth;
            this.Roletypes = roletypes;
            this.Roleinfos = roleinfos;
        }
        
        /// <summary>
        /// 用户唯一标识
        /// </summary>
        /// <value>用户唯一标识</value>
        [DataMember(Name="userid", EmitDefaultValue=false)]
        public string Userid { get; set; }

        /// <summary>
        /// 用户登录账号
        /// </summary>
        /// <value>用户登录账号</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// 用户显示名
        /// </summary>
        /// <value>用户显示名</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 用户邮箱地址
        /// </summary>
        /// <value>用户邮箱地址</value>
        [DataMember(Name="mail", EmitDefaultValue=false)]
        public string Mail { get; set; }

        /// <summary>
        /// 用户密级，5~15
        /// </summary>
        /// <value>用户密级，5~15</value>
        [DataMember(Name="csflevel", EmitDefaultValue=false)]
        public long? Csflevel { get; set; }

        /// <summary>
        /// 防泄密配置  0表示不允许打印，也不允许拷屏  1表示允许打印  2表示允许拷屏  3表示允许打印/拷屏
        /// </summary>
        /// <value>防泄密配置  0表示不允许打印，也不允许拷屏  1表示允许打印  2表示允许拷屏  3表示允许打印/拷屏</value>
        [DataMember(Name="leakproofvalue", EmitDefaultValue=false)]
        public long? Leakproofvalue { get; set; }

        /// <summary>
        /// 是否开启管控密码  1 表示开启  0 表示关闭
        /// </summary>
        /// <value>是否开启管控密码  1 表示开启  0 表示关闭</value>
        [DataMember(Name="pwdcontrol", EmitDefaultValue=false)]
        public long? Pwdcontrol { get; set; }

        /// <summary>
        /// 用户类型  1 表示本地用户  2 表示域用户  3 表示第三方认证用户
        /// </summary>
        /// <value>用户类型  1 表示本地用户  2 表示域用户  3 表示第三方认证用户</value>
        [DataMember(Name="usertype", EmitDefaultValue=false)]
        public long? Usertype { get; set; }

        /// <summary>
        /// 用户的多个直属部门信息
        /// </summary>
        /// <value>用户的多个直属部门信息</value>
        [DataMember(Name="directdepinfos", EmitDefaultValue=false)]
        public List<UserGetResDirectdeptinfo> Directdepinfos { get; set; }

        /// <summary>
        /// 是否需要二次认证
        /// </summary>
        /// <value>是否需要二次认证</value>
        [DataMember(Name="needsecondauth", EmitDefaultValue=false)]
        public bool? Needsecondauth { get; set; }

        /// <summary>
        /// 冻结状态 true：冻结 false：未冻结
        /// </summary>
        /// <value>冻结状态 true：冻结 false：未冻结</value>
        [DataMember(Name="freezestatus", EmitDefaultValue=false)]
        public bool? Freezestatus { get; set; }

        /// <summary>
        /// 同意使用协议状态 true：同意  false：未同意
        /// </summary>
        /// <value>同意使用协议状态 true：同意  false：未同意</value>
        [DataMember(Name="agreedtotermsofuse", EmitDefaultValue=false)]
        public bool? Agreedtotermsofuse { get; set; }

        /// <summary>
        /// 是否为组织管理员
        /// </summary>
        /// <value>是否为组织管理员</value>
        [DataMember(Name="ismanager", EmitDefaultValue=false)]
        public bool? Ismanager { get; set; }

        /// <summary>
        /// 用户手机号
        /// </summary>
        /// <value>用户手机号</value>
        [DataMember(Name="telnumber", EmitDefaultValue=false)]
        public string Telnumber { get; set; }

        /// <summary>
        /// 用户是否需实名认证 true：需要 false : 不需要
        /// </summary>
        /// <value>用户是否需实名认证 true：需要 false : 不需要</value>
        [DataMember(Name="needrealnameauth", EmitDefaultValue=false)]
        public bool? Needrealnameauth { get; set; }

        /// <summary>
        /// 所属角色，整数数组，每个整数表示不同的角色  1：表示文档审核员  [1]
        /// </summary>
        /// <value>所属角色，整数数组，每个整数表示不同的角色  1：表示文档审核员  [1]</value>
        [DataMember(Name="roletypes", EmitDefaultValue=false)]
        public List<long?> Roletypes { get; set; }

        /// <summary>
        /// 用户角色信息
        /// </summary>
        /// <value>用户角色信息</value>
        [DataMember(Name="roleinfos", EmitDefaultValue=false)]
        public List<UserGetResRoleinfo> Roleinfos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserGetRes {\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Mail: ").Append(Mail).Append("\n");
            sb.Append("  Csflevel: ").Append(Csflevel).Append("\n");
            sb.Append("  Leakproofvalue: ").Append(Leakproofvalue).Append("\n");
            sb.Append("  Pwdcontrol: ").Append(Pwdcontrol).Append("\n");
            sb.Append("  Usertype: ").Append(Usertype).Append("\n");
            sb.Append("  Directdepinfos: ").Append(Directdepinfos).Append("\n");
            sb.Append("  Needsecondauth: ").Append(Needsecondauth).Append("\n");
            sb.Append("  Freezestatus: ").Append(Freezestatus).Append("\n");
            sb.Append("  Agreedtotermsofuse: ").Append(Agreedtotermsofuse).Append("\n");
            sb.Append("  Ismanager: ").Append(Ismanager).Append("\n");
            sb.Append("  Telnumber: ").Append(Telnumber).Append("\n");
            sb.Append("  Needrealnameauth: ").Append(Needrealnameauth).Append("\n");
            sb.Append("  Roletypes: ").Append(Roletypes).Append("\n");
            sb.Append("  Roleinfos: ").Append(Roleinfos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserGetRes);
        }

        /// <summary>
        /// Returns true if UserGetRes instances are equal
        /// </summary>
        /// <param name="input">Instance of UserGetRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserGetRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Userid == input.Userid ||
                    (this.Userid != null &&
                    this.Userid.Equals(input.Userid))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Mail == input.Mail ||
                    (this.Mail != null &&
                    this.Mail.Equals(input.Mail))
                ) && 
                (
                    this.Csflevel == input.Csflevel ||
                    (this.Csflevel != null &&
                    this.Csflevel.Equals(input.Csflevel))
                ) && 
                (
                    this.Leakproofvalue == input.Leakproofvalue ||
                    (this.Leakproofvalue != null &&
                    this.Leakproofvalue.Equals(input.Leakproofvalue))
                ) && 
                (
                    this.Pwdcontrol == input.Pwdcontrol ||
                    (this.Pwdcontrol != null &&
                    this.Pwdcontrol.Equals(input.Pwdcontrol))
                ) && 
                (
                    this.Usertype == input.Usertype ||
                    (this.Usertype != null &&
                    this.Usertype.Equals(input.Usertype))
                ) && 
                (
                    this.Directdepinfos == input.Directdepinfos ||
                    this.Directdepinfos != null &&
                    input.Directdepinfos != null &&
                    this.Directdepinfos.SequenceEqual(input.Directdepinfos)
                ) && 
                (
                    this.Needsecondauth == input.Needsecondauth ||
                    (this.Needsecondauth != null &&
                    this.Needsecondauth.Equals(input.Needsecondauth))
                ) && 
                (
                    this.Freezestatus == input.Freezestatus ||
                    (this.Freezestatus != null &&
                    this.Freezestatus.Equals(input.Freezestatus))
                ) && 
                (
                    this.Agreedtotermsofuse == input.Agreedtotermsofuse ||
                    (this.Agreedtotermsofuse != null &&
                    this.Agreedtotermsofuse.Equals(input.Agreedtotermsofuse))
                ) && 
                (
                    this.Ismanager == input.Ismanager ||
                    (this.Ismanager != null &&
                    this.Ismanager.Equals(input.Ismanager))
                ) && 
                (
                    this.Telnumber == input.Telnumber ||
                    (this.Telnumber != null &&
                    this.Telnumber.Equals(input.Telnumber))
                ) && 
                (
                    this.Needrealnameauth == input.Needrealnameauth ||
                    (this.Needrealnameauth != null &&
                    this.Needrealnameauth.Equals(input.Needrealnameauth))
                ) && 
                (
                    this.Roletypes == input.Roletypes ||
                    this.Roletypes != null &&
                    input.Roletypes != null &&
                    this.Roletypes.SequenceEqual(input.Roletypes)
                ) && 
                (
                    this.Roleinfos == input.Roleinfos ||
                    this.Roleinfos != null &&
                    input.Roleinfos != null &&
                    this.Roleinfos.SequenceEqual(input.Roleinfos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Userid != null)
                    hashCode = hashCode * 59 + this.Userid.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Mail != null)
                    hashCode = hashCode * 59 + this.Mail.GetHashCode();
                if (this.Csflevel != null)
                    hashCode = hashCode * 59 + this.Csflevel.GetHashCode();
                if (this.Leakproofvalue != null)
                    hashCode = hashCode * 59 + this.Leakproofvalue.GetHashCode();
                if (this.Pwdcontrol != null)
                    hashCode = hashCode * 59 + this.Pwdcontrol.GetHashCode();
                if (this.Usertype != null)
                    hashCode = hashCode * 59 + this.Usertype.GetHashCode();
                if (this.Directdepinfos != null)
                    hashCode = hashCode * 59 + this.Directdepinfos.GetHashCode();
                if (this.Needsecondauth != null)
                    hashCode = hashCode * 59 + this.Needsecondauth.GetHashCode();
                if (this.Freezestatus != null)
                    hashCode = hashCode * 59 + this.Freezestatus.GetHashCode();
                if (this.Agreedtotermsofuse != null)
                    hashCode = hashCode * 59 + this.Agreedtotermsofuse.GetHashCode();
                if (this.Ismanager != null)
                    hashCode = hashCode * 59 + this.Ismanager.GetHashCode();
                if (this.Telnumber != null)
                    hashCode = hashCode * 59 + this.Telnumber.GetHashCode();
                if (this.Needrealnameauth != null)
                    hashCode = hashCode * 59 + this.Needrealnameauth.GetHashCode();
                if (this.Roletypes != null)
                    hashCode = hashCode * 59 + this.Roletypes.GetHashCode();
                if (this.Roleinfos != null)
                    hashCode = hashCode * 59 + this.Roleinfos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
