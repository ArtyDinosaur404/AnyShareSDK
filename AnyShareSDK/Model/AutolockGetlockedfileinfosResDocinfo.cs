/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// AutolockGetlockedfileinfosResDocinfo
    /// </summary>
    [DataContract]
    public partial class AutolockGetlockedfileinfosResDocinfo :  IEquatable<AutolockGetlockedfileinfosResDocinfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutolockGetlockedfileinfosResDocinfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AutolockGetlockedfileinfosResDocinfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AutolockGetlockedfileinfosResDocinfo" /> class.
        /// </summary>
        /// <param name="locktime">文件锁创建时间（微秒时间戳） (required).</param>
        /// <param name="docid">文件id (required).</param>
        /// <param name="lockeraccount">锁定者用户名 (required).</param>
        /// <param name="lockerid">锁定者id (required).</param>
        /// <param name="lockername">锁定者显示名 (required).</param>
        /// <param name="path">文件路径 (required).</param>
        public AutolockGetlockedfileinfosResDocinfo(long? locktime = default(long?), string docid = default(string), string lockeraccount = default(string), string lockerid = default(string), string lockername = default(string), string path = default(string))
        {
            this.Locktime = locktime;
            this.Docid = docid;
            this.Lockeraccount = lockeraccount;
            this.Lockerid = lockerid;
            this.Lockername = lockername;
            this.Path = path;
        }
        
        /// <summary>
        /// 文件锁创建时间（微秒时间戳）
        /// </summary>
        /// <value>文件锁创建时间（微秒时间戳）</value>
        [DataMember(Name="locktime", EmitDefaultValue=false)]
        public long? Locktime { get; set; }

        /// <summary>
        /// 文件id
        /// </summary>
        /// <value>文件id</value>
        [DataMember(Name="docid", EmitDefaultValue=false)]
        public string Docid { get; set; }

        /// <summary>
        /// 锁定者用户名
        /// </summary>
        /// <value>锁定者用户名</value>
        [DataMember(Name="lockeraccount", EmitDefaultValue=false)]
        public string Lockeraccount { get; set; }

        /// <summary>
        /// 锁定者id
        /// </summary>
        /// <value>锁定者id</value>
        [DataMember(Name="lockerid", EmitDefaultValue=false)]
        public string Lockerid { get; set; }

        /// <summary>
        /// 锁定者显示名
        /// </summary>
        /// <value>锁定者显示名</value>
        [DataMember(Name="lockername", EmitDefaultValue=false)]
        public string Lockername { get; set; }

        /// <summary>
        /// 文件路径
        /// </summary>
        /// <value>文件路径</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutolockGetlockedfileinfosResDocinfo {\n");
            sb.Append("  Locktime: ").Append(Locktime).Append("\n");
            sb.Append("  Docid: ").Append(Docid).Append("\n");
            sb.Append("  Lockeraccount: ").Append(Lockeraccount).Append("\n");
            sb.Append("  Lockerid: ").Append(Lockerid).Append("\n");
            sb.Append("  Lockername: ").Append(Lockername).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AutolockGetlockedfileinfosResDocinfo);
        }

        /// <summary>
        /// Returns true if AutolockGetlockedfileinfosResDocinfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AutolockGetlockedfileinfosResDocinfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutolockGetlockedfileinfosResDocinfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Locktime == input.Locktime ||
                    (this.Locktime != null &&
                    this.Locktime.Equals(input.Locktime))
                ) && 
                (
                    this.Docid == input.Docid ||
                    (this.Docid != null &&
                    this.Docid.Equals(input.Docid))
                ) && 
                (
                    this.Lockeraccount == input.Lockeraccount ||
                    (this.Lockeraccount != null &&
                    this.Lockeraccount.Equals(input.Lockeraccount))
                ) && 
                (
                    this.Lockerid == input.Lockerid ||
                    (this.Lockerid != null &&
                    this.Lockerid.Equals(input.Lockerid))
                ) && 
                (
                    this.Lockername == input.Lockername ||
                    (this.Lockername != null &&
                    this.Lockername.Equals(input.Lockername))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Locktime != null)
                    hashCode = hashCode * 59 + this.Locktime.GetHashCode();
                if (this.Docid != null)
                    hashCode = hashCode * 59 + this.Docid.GetHashCode();
                if (this.Lockeraccount != null)
                    hashCode = hashCode * 59 + this.Lockeraccount.GetHashCode();
                if (this.Lockerid != null)
                    hashCode = hashCode * 59 + this.Lockerid.GetHashCode();
                if (this.Lockername != null)
                    hashCode = hashCode * 59 + this.Lockername.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
