/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// FileGetfilecustomattributeResItem
    /// </summary>
    [DataContract]
    public partial class FileGetfilecustomattributeResItem :  IEquatable<FileGetfilecustomattributeResItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileGetfilecustomattributeResItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileGetfilecustomattributeResItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileGetfilecustomattributeResItem" /> class.
        /// </summary>
        /// <param name="id">属性唯一ID (required).</param>
        /// <param name="name">属性名称 (required).</param>
        /// <param name="value">属性值，类型为：string/int/string array    type等于1、3时value类型为string，0为string array, 其余均为int    属性值为空时不存在此字段    .</param>
        /// <param name="valueid">属性值ID，类型为int/int array    type等于0或1时存在。0时是int array  .</param>
        /// <param name="type">属性类型  - 0：层级  - 1：枚举  - 2：数字  - 3：文本  - 4：时间 （秒）   (required).</param>
        public FileGetfilecustomattributeResItem(long? id = default(long?), string name = default(string), Object value = default(Object), List<int?> valueid = default(List<int?>), long? type = default(long?))
        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.Value = value;
            this.Valueid = valueid;
        }
        
        /// <summary>
        /// 属性唯一ID
        /// </summary>
        /// <value>属性唯一ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// 属性名称
        /// </summary>
        /// <value>属性名称</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 属性值，类型为：string/int/string array    type等于1、3时value类型为string，0为string array, 其余均为int    属性值为空时不存在此字段    
        /// </summary>
        /// <value>属性值，类型为：string/int/string array    type等于1、3时value类型为string，0为string array, 其余均为int    属性值为空时不存在此字段    </value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public Object Value { get; set; }

        /// <summary>
        /// 属性值ID，类型为int/int array    type等于0或1时存在。0时是int array  
        /// </summary>
        /// <value>属性值ID，类型为int/int array    type等于0或1时存在。0时是int array  </value>
        [DataMember(Name="valueid", EmitDefaultValue=false)]
        public List<int?> Valueid { get; set; }

        /// <summary>
        /// 属性类型  - 0：层级  - 1：枚举  - 2：数字  - 3：文本  - 4：时间 （秒）  
        /// </summary>
        /// <value>属性类型  - 0：层级  - 1：枚举  - 2：数字  - 3：文本  - 4：时间 （秒）  </value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public long? Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileGetfilecustomattributeResItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Valueid: ").Append(Valueid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileGetfilecustomattributeResItem);
        }

        /// <summary>
        /// Returns true if FileGetfilecustomattributeResItem instances are equal
        /// </summary>
        /// <param name="input">Instance of FileGetfilecustomattributeResItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileGetfilecustomattributeResItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Valueid == input.Valueid ||
                    this.Valueid != null &&
                    input.Valueid != null &&
                    this.Valueid.SequenceEqual(input.Valueid)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Valueid != null)
                    hashCode = hashCode * 59 + this.Valueid.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
