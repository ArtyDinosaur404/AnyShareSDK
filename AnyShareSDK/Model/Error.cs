/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// 如果接口调用返回的http状态码为非200系列，则表示发生异常，会返回错误码信息，具体参见错误码说明章节
    /// </summary>
    [DataContract]
    public partial class Error :  IEquatable<Error>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Error() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        /// <param name="errcode">错误码 (required).</param>
        /// <param name="errmsg">错误描述，与错误码对应 (required).</param>
        /// <param name="causemsg">错误原因，底层错误信息，仅用于研发排错，客户端不应使用此字段内容 (required).</param>
        public Error(long? errcode = default(long?), string errmsg = default(string), string causemsg = default(string))
        {
            this.Errcode = errcode;
            this.Errmsg = errmsg;
            this.Causemsg = causemsg;
        }
        
        /// <summary>
        /// 错误码
        /// </summary>
        /// <value>错误码</value>
        [DataMember(Name="errcode", EmitDefaultValue=false)]
        public long? Errcode { get; set; }

        /// <summary>
        /// 错误描述，与错误码对应
        /// </summary>
        /// <value>错误描述，与错误码对应</value>
        [DataMember(Name="errmsg", EmitDefaultValue=false)]
        public string Errmsg { get; set; }

        /// <summary>
        /// 错误原因，底层错误信息，仅用于研发排错，客户端不应使用此字段内容
        /// </summary>
        /// <value>错误原因，底层错误信息，仅用于研发排错，客户端不应使用此字段内容</value>
        [DataMember(Name="causemsg", EmitDefaultValue=false)]
        public string Causemsg { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  Errcode: ").Append(Errcode).Append("\n");
            sb.Append("  Errmsg: ").Append(Errmsg).Append("\n");
            sb.Append("  Causemsg: ").Append(Causemsg).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Error);
        }

        /// <summary>
        /// Returns true if Error instances are equal
        /// </summary>
        /// <param name="input">Instance of Error to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Error input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Errcode == input.Errcode ||
                    (this.Errcode != null &&
                    this.Errcode.Equals(input.Errcode))
                ) && 
                (
                    this.Errmsg == input.Errmsg ||
                    (this.Errmsg != null &&
                    this.Errmsg.Equals(input.Errmsg))
                ) && 
                (
                    this.Causemsg == input.Causemsg ||
                    (this.Causemsg != null &&
                    this.Causemsg.Equals(input.Causemsg))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Errcode != null)
                    hashCode = hashCode * 59 + this.Errcode.GetHashCode();
                if (this.Errmsg != null)
                    hashCode = hashCode * 59 + this.Errmsg.GetHashCode();
                if (this.Causemsg != null)
                    hashCode = hashCode * 59 + this.Causemsg.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
