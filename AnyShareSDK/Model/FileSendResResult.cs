/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// FileSendResResult
    /// </summary>
    [DataContract]
    public partial class FileSendResResult :  IEquatable<FileSendResResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileSendResResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileSendResResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileSendResResult" /> class.
        /// </summary>
        /// <param name="causemsg">发送成功时为空；否则为详细错误信息 (required).</param>
        /// <param name="msg">发送成功时为空；否则为错误信息 (required).</param>
        /// <param name="recipient">收件人名字 (required).</param>
        /// <param name="success">发送是否成功 (required).</param>
        public FileSendResResult(string causemsg = default(string), string msg = default(string), string recipient = default(string), bool? success = default(bool?))
        {
            this.Causemsg = causemsg;
            this.Msg = msg;
            this.Recipient = recipient;
            this.Success = success;
        }
        
        /// <summary>
        /// 发送成功时为空；否则为详细错误信息
        /// </summary>
        /// <value>发送成功时为空；否则为详细错误信息</value>
        [DataMember(Name="causemsg", EmitDefaultValue=false)]
        public string Causemsg { get; set; }

        /// <summary>
        /// 发送成功时为空；否则为错误信息
        /// </summary>
        /// <value>发送成功时为空；否则为错误信息</value>
        [DataMember(Name="msg", EmitDefaultValue=false)]
        public string Msg { get; set; }

        /// <summary>
        /// 收件人名字
        /// </summary>
        /// <value>收件人名字</value>
        [DataMember(Name="recipient", EmitDefaultValue=false)]
        public string Recipient { get; set; }

        /// <summary>
        /// 发送是否成功
        /// </summary>
        /// <value>发送是否成功</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileSendResResult {\n");
            sb.Append("  Causemsg: ").Append(Causemsg).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileSendResResult);
        }

        /// <summary>
        /// Returns true if FileSendResResult instances are equal
        /// </summary>
        /// <param name="input">Instance of FileSendResResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileSendResResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Causemsg == input.Causemsg ||
                    (this.Causemsg != null &&
                    this.Causemsg.Equals(input.Causemsg))
                ) && 
                (
                    this.Msg == input.Msg ||
                    (this.Msg != null &&
                    this.Msg.Equals(input.Msg))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Causemsg != null)
                    hashCode = hashCode * 59 + this.Causemsg.GetHashCode();
                if (this.Msg != null)
                    hashCode = hashCode * 59 + this.Msg.GetHashCode();
                if (this.Recipient != null)
                    hashCode = hashCode * 59 + this.Recipient.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
