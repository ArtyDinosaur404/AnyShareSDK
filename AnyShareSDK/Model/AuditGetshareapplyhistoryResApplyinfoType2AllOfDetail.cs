/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// 具体的申请信息，根据apptype，所包含的字段不同
    /// </summary>
    [DataContract]
    public partial class AuditGetshareapplyhistoryResApplyinfoType2AllOfDetail :  IEquatable<AuditGetshareapplyhistoryResApplyinfoType2AllOfDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditGetshareapplyhistoryResApplyinfoType2AllOfDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuditGetshareapplyhistoryResApplyinfoType2AllOfDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditGetshareapplyhistoryResApplyinfoType2AllOfDetail" /> class.
        /// </summary>
        /// <param name="accessLimit">最大访问次数，-1表示不限制 (required).</param>
        /// <param name="auditmsg">审核说明 (required).</param>
        /// <param name="endtime">截止时间 (required).</param>
        /// <param name="link">外链唯一标识 (required).</param>
        /// <param name="optype">外链操作类型  1表示新增  2表示编辑 (required).</param>
        /// <param name="password">访问密码 (required).</param>
        /// <param name="perm">外链权限 (required).</param>
        /// <param name="watermarkConfig">水印配置信息 (required).</param>
        public AuditGetshareapplyhistoryResApplyinfoType2AllOfDetail(long? accessLimit = default(long?), string auditmsg = default(string), long? endtime = default(long?), string link = default(string), long? optype = default(long?), string password = default(string), long? perm = default(long?), string watermarkConfig = default(string))
        {
            this.AccessLimit = accessLimit;
            this.Auditmsg = auditmsg;
            this.Endtime = endtime;
            this.Link = link;
            this.Optype = optype;
            this.Password = password;
            this.Perm = perm;
            this.WatermarkConfig = watermarkConfig;
        }
        
        /// <summary>
        /// 最大访问次数，-1表示不限制
        /// </summary>
        /// <value>最大访问次数，-1表示不限制</value>
        [DataMember(Name="accessLimit", EmitDefaultValue=false)]
        public long? AccessLimit { get; set; }

        /// <summary>
        /// 审核说明
        /// </summary>
        /// <value>审核说明</value>
        [DataMember(Name="auditmsg", EmitDefaultValue=false)]
        public string Auditmsg { get; set; }

        /// <summary>
        /// 截止时间
        /// </summary>
        /// <value>截止时间</value>
        [DataMember(Name="endtime", EmitDefaultValue=false)]
        public long? Endtime { get; set; }

        /// <summary>
        /// 外链唯一标识
        /// </summary>
        /// <value>外链唯一标识</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// 外链操作类型  1表示新增  2表示编辑
        /// </summary>
        /// <value>外链操作类型  1表示新增  2表示编辑</value>
        [DataMember(Name="optype", EmitDefaultValue=false)]
        public long? Optype { get; set; }

        /// <summary>
        /// 访问密码
        /// </summary>
        /// <value>访问密码</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// 外链权限
        /// </summary>
        /// <value>外链权限</value>
        [DataMember(Name="perm", EmitDefaultValue=false)]
        public long? Perm { get; set; }

        /// <summary>
        /// 水印配置信息
        /// </summary>
        /// <value>水印配置信息</value>
        [DataMember(Name="watermarkConfig", EmitDefaultValue=false)]
        public string WatermarkConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditGetshareapplyhistoryResApplyinfoType2AllOfDetail {\n");
            sb.Append("  AccessLimit: ").Append(AccessLimit).Append("\n");
            sb.Append("  Auditmsg: ").Append(Auditmsg).Append("\n");
            sb.Append("  Endtime: ").Append(Endtime).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Optype: ").Append(Optype).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Perm: ").Append(Perm).Append("\n");
            sb.Append("  WatermarkConfig: ").Append(WatermarkConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditGetshareapplyhistoryResApplyinfoType2AllOfDetail);
        }

        /// <summary>
        /// Returns true if AuditGetshareapplyhistoryResApplyinfoType2AllOfDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditGetshareapplyhistoryResApplyinfoType2AllOfDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditGetshareapplyhistoryResApplyinfoType2AllOfDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessLimit == input.AccessLimit ||
                    (this.AccessLimit != null &&
                    this.AccessLimit.Equals(input.AccessLimit))
                ) && 
                (
                    this.Auditmsg == input.Auditmsg ||
                    (this.Auditmsg != null &&
                    this.Auditmsg.Equals(input.Auditmsg))
                ) && 
                (
                    this.Endtime == input.Endtime ||
                    (this.Endtime != null &&
                    this.Endtime.Equals(input.Endtime))
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Optype == input.Optype ||
                    (this.Optype != null &&
                    this.Optype.Equals(input.Optype))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Perm == input.Perm ||
                    (this.Perm != null &&
                    this.Perm.Equals(input.Perm))
                ) && 
                (
                    this.WatermarkConfig == input.WatermarkConfig ||
                    (this.WatermarkConfig != null &&
                    this.WatermarkConfig.Equals(input.WatermarkConfig))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessLimit != null)
                    hashCode = hashCode * 59 + this.AccessLimit.GetHashCode();
                if (this.Auditmsg != null)
                    hashCode = hashCode * 59 + this.Auditmsg.GetHashCode();
                if (this.Endtime != null)
                    hashCode = hashCode * 59 + this.Endtime.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Optype != null)
                    hashCode = hashCode * 59 + this.Optype.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Perm != null)
                    hashCode = hashCode * 59 + this.Perm.GetHashCode();
                if (this.WatermarkConfig != null)
                    hashCode = hashCode * 59 + this.WatermarkConfig.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
