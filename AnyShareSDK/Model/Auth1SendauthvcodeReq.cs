/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// Auth1SendauthvcodeReq
    /// </summary>
    [DataContract]
    public partial class Auth1SendauthvcodeReq :  IEquatable<Auth1SendauthvcodeReq>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Auth1SendauthvcodeReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Auth1SendauthvcodeReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Auth1SendauthvcodeReq" /> class.
        /// </summary>
        /// <param name="account">用户登录账号 (required).</param>
        /// <param name="password">加密后的密文 (required).</param>
        /// <param name="oldtelnum">上一次的获取的手机号（处理管理员修改手机号的情况） (required).</param>
        /// <param name="deviceinfo">deviceinfo.</param>
        public Auth1SendauthvcodeReq(string account = default(string), string password = default(string), string oldtelnum = default(string), Auth1SendauthvcodeReqDeviceinfo deviceinfo = default(Auth1SendauthvcodeReqDeviceinfo))
        {
            this.Account = account;
            this.Password = password;
            this.Oldtelnum = oldtelnum;
            this.Deviceinfo = deviceinfo;
        }
        
        /// <summary>
        /// 用户登录账号
        /// </summary>
        /// <value>用户登录账号</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// 加密后的密文
        /// </summary>
        /// <value>加密后的密文</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// 上一次的获取的手机号（处理管理员修改手机号的情况）
        /// </summary>
        /// <value>上一次的获取的手机号（处理管理员修改手机号的情况）</value>
        [DataMember(Name="oldtelnum", EmitDefaultValue=false)]
        public string Oldtelnum { get; set; }

        /// <summary>
        /// Gets or Sets Deviceinfo
        /// </summary>
        [DataMember(Name="deviceinfo", EmitDefaultValue=false)]
        public Auth1SendauthvcodeReqDeviceinfo Deviceinfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Auth1SendauthvcodeReq {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Oldtelnum: ").Append(Oldtelnum).Append("\n");
            sb.Append("  Deviceinfo: ").Append(Deviceinfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Auth1SendauthvcodeReq);
        }

        /// <summary>
        /// Returns true if Auth1SendauthvcodeReq instances are equal
        /// </summary>
        /// <param name="input">Instance of Auth1SendauthvcodeReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Auth1SendauthvcodeReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Oldtelnum == input.Oldtelnum ||
                    (this.Oldtelnum != null &&
                    this.Oldtelnum.Equals(input.Oldtelnum))
                ) && 
                (
                    this.Deviceinfo == input.Deviceinfo ||
                    (this.Deviceinfo != null &&
                    this.Deviceinfo.Equals(input.Deviceinfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Oldtelnum != null)
                    hashCode = hashCode * 59 + this.Oldtelnum.GetHashCode();
                if (this.Deviceinfo != null)
                    hashCode = hashCode * 59 + this.Deviceinfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
