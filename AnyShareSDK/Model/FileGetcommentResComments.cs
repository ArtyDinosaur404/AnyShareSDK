/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// FileGetcommentResComments
    /// </summary>
    [DataContract]
    public partial class FileGetcommentResComments :  IEquatable<FileGetcommentResComments>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileGetcommentResComments" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileGetcommentResComments() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileGetcommentResComments" /> class.
        /// </summary>
        /// <param name="id">评论id (required).</param>
        /// <param name="commentator">评论人 (required).</param>
        /// <param name="commentatorid">评论人id (required).</param>
        /// <param name="answerto">被回复者，无被回复者时，该项为空    mode 为 1 或 3 时，返回此项   (required).</param>
        /// <param name="score">评分    mode 为 2 或 3 时，返回此项    默认为-1，表示未评分   (required).</param>
        /// <param name="comment">评论内容    mode 为 1 或 3 时，返回此项    默认为空，表示无评分内容   (required).</param>
        /// <param name="time">评论的时间戳，UTC时间，精确到微秒 (required).</param>
        public FileGetcommentResComments(long? id = default(long?), string commentator = default(string), string commentatorid = default(string), string answerto = default(string), long? score = default(long?), string comment = default(string), long? time = default(long?))
        {
            this.Id = id;
            this.Commentator = commentator;
            this.Commentatorid = commentatorid;
            this.Answerto = answerto;
            this.Score = score;
            this.Comment = comment;
            this.Time = time;
        }
        
        /// <summary>
        /// 评论id
        /// </summary>
        /// <value>评论id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// 评论人
        /// </summary>
        /// <value>评论人</value>
        [DataMember(Name="commentator", EmitDefaultValue=false)]
        public string Commentator { get; set; }

        /// <summary>
        /// 评论人id
        /// </summary>
        /// <value>评论人id</value>
        [DataMember(Name="commentatorid", EmitDefaultValue=false)]
        public string Commentatorid { get; set; }

        /// <summary>
        /// 被回复者，无被回复者时，该项为空    mode 为 1 或 3 时，返回此项  
        /// </summary>
        /// <value>被回复者，无被回复者时，该项为空    mode 为 1 或 3 时，返回此项  </value>
        [DataMember(Name="answerto", EmitDefaultValue=false)]
        public string Answerto { get; set; }

        /// <summary>
        /// 评分    mode 为 2 或 3 时，返回此项    默认为-1，表示未评分  
        /// </summary>
        /// <value>评分    mode 为 2 或 3 时，返回此项    默认为-1，表示未评分  </value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public long? Score { get; set; }

        /// <summary>
        /// 评论内容    mode 为 1 或 3 时，返回此项    默认为空，表示无评分内容  
        /// </summary>
        /// <value>评论内容    mode 为 1 或 3 时，返回此项    默认为空，表示无评分内容  </value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// 评论的时间戳，UTC时间，精确到微秒
        /// </summary>
        /// <value>评论的时间戳，UTC时间，精确到微秒</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public long? Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileGetcommentResComments {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Commentator: ").Append(Commentator).Append("\n");
            sb.Append("  Commentatorid: ").Append(Commentatorid).Append("\n");
            sb.Append("  Answerto: ").Append(Answerto).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileGetcommentResComments);
        }

        /// <summary>
        /// Returns true if FileGetcommentResComments instances are equal
        /// </summary>
        /// <param name="input">Instance of FileGetcommentResComments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileGetcommentResComments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Commentator == input.Commentator ||
                    (this.Commentator != null &&
                    this.Commentator.Equals(input.Commentator))
                ) && 
                (
                    this.Commentatorid == input.Commentatorid ||
                    (this.Commentatorid != null &&
                    this.Commentatorid.Equals(input.Commentatorid))
                ) && 
                (
                    this.Answerto == input.Answerto ||
                    (this.Answerto != null &&
                    this.Answerto.Equals(input.Answerto))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Commentator != null)
                    hashCode = hashCode * 59 + this.Commentator.GetHashCode();
                if (this.Commentatorid != null)
                    hashCode = hashCode * 59 + this.Commentatorid.GetHashCode();
                if (this.Answerto != null)
                    hashCode = hashCode * 59 + this.Answerto.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
