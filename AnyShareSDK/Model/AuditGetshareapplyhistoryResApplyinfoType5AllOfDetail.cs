/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// 具体的申请信息，根据apptype，所包含的字段不同
    /// </summary>
    [DataContract]
    public partial class AuditGetshareapplyhistoryResApplyinfoType5AllOfDetail :  IEquatable<AuditGetshareapplyhistoryResApplyinfoType5AllOfDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditGetshareapplyhistoryResApplyinfoType5AllOfDetail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuditGetshareapplyhistoryResApplyinfoType5AllOfDetail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditGetshareapplyhistoryResApplyinfoType5AllOfDetail" /> class.
        /// </summary>
        /// <param name="applycsflevel">所要申请的密级大小 (required).</param>
        /// <param name="auditmsg">审核说明 (required).</param>
        /// <param name="doccsflevel">文档密级，文件夹为子对象中的最大密级 (required).</param>
        /// <param name="usercsflevel">申请时用户密级 (required).</param>
        public AuditGetshareapplyhistoryResApplyinfoType5AllOfDetail(long? applycsflevel = default(long?), string auditmsg = default(string), long? doccsflevel = default(long?), long? usercsflevel = default(long?))
        {
            this.Applycsflevel = applycsflevel;
            this.Auditmsg = auditmsg;
            this.Doccsflevel = doccsflevel;
            this.Usercsflevel = usercsflevel;
        }
        
        /// <summary>
        /// 所要申请的密级大小
        /// </summary>
        /// <value>所要申请的密级大小</value>
        [DataMember(Name="applycsflevel", EmitDefaultValue=false)]
        public long? Applycsflevel { get; set; }

        /// <summary>
        /// 审核说明
        /// </summary>
        /// <value>审核说明</value>
        [DataMember(Name="auditmsg", EmitDefaultValue=false)]
        public string Auditmsg { get; set; }

        /// <summary>
        /// 文档密级，文件夹为子对象中的最大密级
        /// </summary>
        /// <value>文档密级，文件夹为子对象中的最大密级</value>
        [DataMember(Name="doccsflevel", EmitDefaultValue=false)]
        public long? Doccsflevel { get; set; }

        /// <summary>
        /// 申请时用户密级
        /// </summary>
        /// <value>申请时用户密级</value>
        [DataMember(Name="usercsflevel", EmitDefaultValue=false)]
        public long? Usercsflevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditGetshareapplyhistoryResApplyinfoType5AllOfDetail {\n");
            sb.Append("  Applycsflevel: ").Append(Applycsflevel).Append("\n");
            sb.Append("  Auditmsg: ").Append(Auditmsg).Append("\n");
            sb.Append("  Doccsflevel: ").Append(Doccsflevel).Append("\n");
            sb.Append("  Usercsflevel: ").Append(Usercsflevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditGetshareapplyhistoryResApplyinfoType5AllOfDetail);
        }

        /// <summary>
        /// Returns true if AuditGetshareapplyhistoryResApplyinfoType5AllOfDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditGetshareapplyhistoryResApplyinfoType5AllOfDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditGetshareapplyhistoryResApplyinfoType5AllOfDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Applycsflevel == input.Applycsflevel ||
                    (this.Applycsflevel != null &&
                    this.Applycsflevel.Equals(input.Applycsflevel))
                ) && 
                (
                    this.Auditmsg == input.Auditmsg ||
                    (this.Auditmsg != null &&
                    this.Auditmsg.Equals(input.Auditmsg))
                ) && 
                (
                    this.Doccsflevel == input.Doccsflevel ||
                    (this.Doccsflevel != null &&
                    this.Doccsflevel.Equals(input.Doccsflevel))
                ) && 
                (
                    this.Usercsflevel == input.Usercsflevel ||
                    (this.Usercsflevel != null &&
                    this.Usercsflevel.Equals(input.Usercsflevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Applycsflevel != null)
                    hashCode = hashCode * 59 + this.Applycsflevel.GetHashCode();
                if (this.Auditmsg != null)
                    hashCode = hashCode * 59 + this.Auditmsg.GetHashCode();
                if (this.Doccsflevel != null)
                    hashCode = hashCode * 59 + this.Doccsflevel.GetHashCode();
                if (this.Usercsflevel != null)
                    hashCode = hashCode * 59 + this.Usercsflevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
