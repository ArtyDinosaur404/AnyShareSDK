/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// FileGetcommentRes
    /// </summary>
    [DataContract]
    public partial class FileGetcommentRes :  IEquatable<FileGetcommentRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileGetcommentRes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileGetcommentRes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileGetcommentRes" /> class.
        /// </summary>
        /// <param name="mode">评论模式  - 0:未启用评论和评分  - 1:只启用评论  - 2:只启用评分  - 3:同时启用评论和评分   (required).</param>
        /// <param name="averagescore">总评分    mode 为 2 或 3 时，返回此项  .</param>
        /// <param name="hasscored">用户是否已经评分    mode 为 2 或 3 时，返回此项  .</param>
        /// <param name="comments">评论内容的数组    mode 不为 0 时，返回此项  .</param>
        public FileGetcommentRes(long? mode = default(long?), double? averagescore = default(double?), bool? hasscored = default(bool?), List<FileGetcommentResComments> comments = default(List<FileGetcommentResComments>))
        {
            this.Mode = mode;
            this.Averagescore = averagescore;
            this.Hasscored = hasscored;
            this.Comments = comments;
        }
        
        /// <summary>
        /// 评论模式  - 0:未启用评论和评分  - 1:只启用评论  - 2:只启用评分  - 3:同时启用评论和评分  
        /// </summary>
        /// <value>评论模式  - 0:未启用评论和评分  - 1:只启用评论  - 2:只启用评分  - 3:同时启用评论和评分  </value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public long? Mode { get; set; }

        /// <summary>
        /// 总评分    mode 为 2 或 3 时，返回此项  
        /// </summary>
        /// <value>总评分    mode 为 2 或 3 时，返回此项  </value>
        [DataMember(Name="averagescore", EmitDefaultValue=false)]
        public double? Averagescore { get; set; }

        /// <summary>
        /// 用户是否已经评分    mode 为 2 或 3 时，返回此项  
        /// </summary>
        /// <value>用户是否已经评分    mode 为 2 或 3 时，返回此项  </value>
        [DataMember(Name="hasscored", EmitDefaultValue=false)]
        public bool? Hasscored { get; set; }

        /// <summary>
        /// 评论内容的数组    mode 不为 0 时，返回此项  
        /// </summary>
        /// <value>评论内容的数组    mode 不为 0 时，返回此项  </value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public List<FileGetcommentResComments> Comments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileGetcommentRes {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Averagescore: ").Append(Averagescore).Append("\n");
            sb.Append("  Hasscored: ").Append(Hasscored).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileGetcommentRes);
        }

        /// <summary>
        /// Returns true if FileGetcommentRes instances are equal
        /// </summary>
        /// <param name="input">Instance of FileGetcommentRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileGetcommentRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Averagescore == input.Averagescore ||
                    (this.Averagescore != null &&
                    this.Averagescore.Equals(input.Averagescore))
                ) && 
                (
                    this.Hasscored == input.Hasscored ||
                    (this.Hasscored != null &&
                    this.Hasscored.Equals(input.Hasscored))
                ) && 
                (
                    this.Comments == input.Comments ||
                    this.Comments != null &&
                    input.Comments != null &&
                    this.Comments.SequenceEqual(input.Comments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Averagescore != null)
                    hashCode = hashCode * 59 + this.Averagescore.GetHashCode();
                if (this.Hasscored != null)
                    hashCode = hashCode * 59 + this.Hasscored.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
