/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// oem配置信息
    /// </summary>
    [DataContract]
    public partial class Auth1GetconfigResOemconfig :  IEquatable<Auth1GetconfigResOemconfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Auth1GetconfigResOemconfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Auth1GetconfigResOemconfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Auth1GetconfigResOemconfig" /> class.
        /// </summary>
        /// <param name="allowauthlowcsfuser">权限配置，是否允许给密级低于文件密级的用户配置权限 (required).</param>
        /// <param name="allowowner">权限配置，是否允许配置所有者 (required).</param>
        /// <param name="cadpreview">是否启用CAD预览服务 (required).</param>
        /// <param name="clearcache">客户端退出时，是否强制清除缓存 (required).</param>
        /// <param name="clientlogouttime">客户端超时退出时间，单位为分钟  -1表示不开启超时退出  其它值表示多少分钟后退出  例如30表示30分钟超时后退出 (required).</param>
        /// <param name="defaultpermexpireddays">客户端配置权限时，默认权限有效天数  -1为无限期 (required).</param>
        /// <param name="enableclientmanuallogin">是否允许AnyShare客户端手动登录 (required).</param>
        /// <param name="enablecsflevel">是否开启更改密级审核  true表示开启  false表示关闭 (required).</param>
        /// <param name="enablefiletransferlimit">是否开启文件传输限制功能 (required).</param>
        /// <param name="enablehttplinkaudit">是否开启http共享审核  true表示开启  false表示关闭 (required).</param>
        /// <param name="enableonedrive">是否启用onedrive跳转，默认为false (required).</param>
        /// <param name="enableshareaudit">是否开启共享审核  true表示开启  false表示关闭 (required).</param>
        /// <param name="enableuseragreement">是否显示用户协议，默认为false (required).</param>
        /// <param name="hidecachesetting">客户端是否隐藏缓存设置 (required).</param>
        /// <param name="indefiniteperm">权限配置，截至时间是否支持无限期 (required).</param>
        /// <param name="maxpassexpireddays">密码配置，密码允许的最大过期天数  -1为永久 (required).</param>
        /// <param name="owasurl">OWAS的预览url，如果未配置则为空字符串 (required).</param>
        /// <param name="rememberpass">登录配置，是否允许记住用户名和密码 (required).</param>
        /// <param name="sursenpreview">是否开启gd/sep预览 (required).</param>
        /// <param name="wopiurl">WOPI的url，如果未配置则为空字符串 (required).</param>
        /// <param name="cadtool">配置的转换服务类型，cadpreview为true时返回 \&quot;mx\&quot;为梦想CAD \&quot;hc\&quot;为浩辰CAD.</param>
        /// <param name="cadurl">CAD服务器地址 cadpreview为true，且cadtool为\&quot;hc\&quot;时返回.</param>
        public Auth1GetconfigResOemconfig(bool? allowauthlowcsfuser = default(bool?), bool? allowowner = default(bool?), bool? cadpreview = default(bool?), bool? clearcache = default(bool?), long? clientlogouttime = default(long?), long? defaultpermexpireddays = default(long?), bool? enableclientmanuallogin = default(bool?), bool? enablecsflevel = default(bool?), bool? enablefiletransferlimit = default(bool?), bool? enablehttplinkaudit = default(bool?), bool? enableonedrive = default(bool?), bool? enableshareaudit = default(bool?), bool? enableuseragreement = default(bool?), bool? hidecachesetting = default(bool?), bool? indefiniteperm = default(bool?), long? maxpassexpireddays = default(long?), string owasurl = default(string), bool? rememberpass = default(bool?), bool? sursenpreview = default(bool?), string wopiurl = default(string), string cadtool = default(string), string cadurl = default(string))
        {
            this.Allowauthlowcsfuser = allowauthlowcsfuser;
            this.Allowowner = allowowner;
            this.Cadpreview = cadpreview;
            this.Clearcache = clearcache;
            this.Clientlogouttime = clientlogouttime;
            this.Defaultpermexpireddays = defaultpermexpireddays;
            this.Enableclientmanuallogin = enableclientmanuallogin;
            this.Enablecsflevel = enablecsflevel;
            this.Enablefiletransferlimit = enablefiletransferlimit;
            this.Enablehttplinkaudit = enablehttplinkaudit;
            this.Enableonedrive = enableonedrive;
            this.Enableshareaudit = enableshareaudit;
            this.Enableuseragreement = enableuseragreement;
            this.Hidecachesetting = hidecachesetting;
            this.Indefiniteperm = indefiniteperm;
            this.Maxpassexpireddays = maxpassexpireddays;
            this.Owasurl = owasurl;
            this.Rememberpass = rememberpass;
            this.Sursenpreview = sursenpreview;
            this.Wopiurl = wopiurl;
            this.Cadtool = cadtool;
            this.Cadurl = cadurl;
        }
        
        /// <summary>
        /// 权限配置，是否允许给密级低于文件密级的用户配置权限
        /// </summary>
        /// <value>权限配置，是否允许给密级低于文件密级的用户配置权限</value>
        [DataMember(Name="allowauthlowcsfuser", EmitDefaultValue=false)]
        public bool? Allowauthlowcsfuser { get; set; }

        /// <summary>
        /// 权限配置，是否允许配置所有者
        /// </summary>
        /// <value>权限配置，是否允许配置所有者</value>
        [DataMember(Name="allowowner", EmitDefaultValue=false)]
        public bool? Allowowner { get; set; }

        /// <summary>
        /// 是否启用CAD预览服务
        /// </summary>
        /// <value>是否启用CAD预览服务</value>
        [DataMember(Name="cadpreview", EmitDefaultValue=false)]
        public bool? Cadpreview { get; set; }

        /// <summary>
        /// 客户端退出时，是否强制清除缓存
        /// </summary>
        /// <value>客户端退出时，是否强制清除缓存</value>
        [DataMember(Name="clearcache", EmitDefaultValue=false)]
        public bool? Clearcache { get; set; }

        /// <summary>
        /// 客户端超时退出时间，单位为分钟  -1表示不开启超时退出  其它值表示多少分钟后退出  例如30表示30分钟超时后退出
        /// </summary>
        /// <value>客户端超时退出时间，单位为分钟  -1表示不开启超时退出  其它值表示多少分钟后退出  例如30表示30分钟超时后退出</value>
        [DataMember(Name="clientlogouttime", EmitDefaultValue=false)]
        public long? Clientlogouttime { get; set; }

        /// <summary>
        /// 客户端配置权限时，默认权限有效天数  -1为无限期
        /// </summary>
        /// <value>客户端配置权限时，默认权限有效天数  -1为无限期</value>
        [DataMember(Name="defaultpermexpireddays", EmitDefaultValue=false)]
        public long? Defaultpermexpireddays { get; set; }

        /// <summary>
        /// 是否允许AnyShare客户端手动登录
        /// </summary>
        /// <value>是否允许AnyShare客户端手动登录</value>
        [DataMember(Name="enableclientmanuallogin", EmitDefaultValue=false)]
        public bool? Enableclientmanuallogin { get; set; }

        /// <summary>
        /// 是否开启更改密级审核  true表示开启  false表示关闭
        /// </summary>
        /// <value>是否开启更改密级审核  true表示开启  false表示关闭</value>
        [DataMember(Name="enablecsflevel", EmitDefaultValue=false)]
        public bool? Enablecsflevel { get; set; }

        /// <summary>
        /// 是否开启文件传输限制功能
        /// </summary>
        /// <value>是否开启文件传输限制功能</value>
        [DataMember(Name="enablefiletransferlimit", EmitDefaultValue=false)]
        public bool? Enablefiletransferlimit { get; set; }

        /// <summary>
        /// 是否开启http共享审核  true表示开启  false表示关闭
        /// </summary>
        /// <value>是否开启http共享审核  true表示开启  false表示关闭</value>
        [DataMember(Name="enablehttplinkaudit", EmitDefaultValue=false)]
        public bool? Enablehttplinkaudit { get; set; }

        /// <summary>
        /// 是否启用onedrive跳转，默认为false
        /// </summary>
        /// <value>是否启用onedrive跳转，默认为false</value>
        [DataMember(Name="enableonedrive", EmitDefaultValue=false)]
        public bool? Enableonedrive { get; set; }

        /// <summary>
        /// 是否开启共享审核  true表示开启  false表示关闭
        /// </summary>
        /// <value>是否开启共享审核  true表示开启  false表示关闭</value>
        [DataMember(Name="enableshareaudit", EmitDefaultValue=false)]
        public bool? Enableshareaudit { get; set; }

        /// <summary>
        /// 是否显示用户协议，默认为false
        /// </summary>
        /// <value>是否显示用户协议，默认为false</value>
        [DataMember(Name="enableuseragreement", EmitDefaultValue=false)]
        public bool? Enableuseragreement { get; set; }

        /// <summary>
        /// 客户端是否隐藏缓存设置
        /// </summary>
        /// <value>客户端是否隐藏缓存设置</value>
        [DataMember(Name="hidecachesetting", EmitDefaultValue=false)]
        public bool? Hidecachesetting { get; set; }

        /// <summary>
        /// 权限配置，截至时间是否支持无限期
        /// </summary>
        /// <value>权限配置，截至时间是否支持无限期</value>
        [DataMember(Name="indefiniteperm", EmitDefaultValue=false)]
        public bool? Indefiniteperm { get; set; }

        /// <summary>
        /// 密码配置，密码允许的最大过期天数  -1为永久
        /// </summary>
        /// <value>密码配置，密码允许的最大过期天数  -1为永久</value>
        [DataMember(Name="maxpassexpireddays", EmitDefaultValue=false)]
        public long? Maxpassexpireddays { get; set; }

        /// <summary>
        /// OWAS的预览url，如果未配置则为空字符串
        /// </summary>
        /// <value>OWAS的预览url，如果未配置则为空字符串</value>
        [DataMember(Name="owasurl", EmitDefaultValue=false)]
        public string Owasurl { get; set; }

        /// <summary>
        /// 登录配置，是否允许记住用户名和密码
        /// </summary>
        /// <value>登录配置，是否允许记住用户名和密码</value>
        [DataMember(Name="rememberpass", EmitDefaultValue=false)]
        public bool? Rememberpass { get; set; }

        /// <summary>
        /// 是否开启gd/sep预览
        /// </summary>
        /// <value>是否开启gd/sep预览</value>
        [DataMember(Name="sursenpreview", EmitDefaultValue=false)]
        public bool? Sursenpreview { get; set; }

        /// <summary>
        /// WOPI的url，如果未配置则为空字符串
        /// </summary>
        /// <value>WOPI的url，如果未配置则为空字符串</value>
        [DataMember(Name="wopiurl", EmitDefaultValue=false)]
        public string Wopiurl { get; set; }

        /// <summary>
        /// 配置的转换服务类型，cadpreview为true时返回 \&quot;mx\&quot;为梦想CAD \&quot;hc\&quot;为浩辰CAD
        /// </summary>
        /// <value>配置的转换服务类型，cadpreview为true时返回 \&quot;mx\&quot;为梦想CAD \&quot;hc\&quot;为浩辰CAD</value>
        [DataMember(Name="cadtool", EmitDefaultValue=false)]
        public string Cadtool { get; set; }

        /// <summary>
        /// CAD服务器地址 cadpreview为true，且cadtool为\&quot;hc\&quot;时返回
        /// </summary>
        /// <value>CAD服务器地址 cadpreview为true，且cadtool为\&quot;hc\&quot;时返回</value>
        [DataMember(Name="cadurl", EmitDefaultValue=false)]
        public string Cadurl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Auth1GetconfigResOemconfig {\n");
            sb.Append("  Allowauthlowcsfuser: ").Append(Allowauthlowcsfuser).Append("\n");
            sb.Append("  Allowowner: ").Append(Allowowner).Append("\n");
            sb.Append("  Cadpreview: ").Append(Cadpreview).Append("\n");
            sb.Append("  Clearcache: ").Append(Clearcache).Append("\n");
            sb.Append("  Clientlogouttime: ").Append(Clientlogouttime).Append("\n");
            sb.Append("  Defaultpermexpireddays: ").Append(Defaultpermexpireddays).Append("\n");
            sb.Append("  Enableclientmanuallogin: ").Append(Enableclientmanuallogin).Append("\n");
            sb.Append("  Enablecsflevel: ").Append(Enablecsflevel).Append("\n");
            sb.Append("  Enablefiletransferlimit: ").Append(Enablefiletransferlimit).Append("\n");
            sb.Append("  Enablehttplinkaudit: ").Append(Enablehttplinkaudit).Append("\n");
            sb.Append("  Enableonedrive: ").Append(Enableonedrive).Append("\n");
            sb.Append("  Enableshareaudit: ").Append(Enableshareaudit).Append("\n");
            sb.Append("  Enableuseragreement: ").Append(Enableuseragreement).Append("\n");
            sb.Append("  Hidecachesetting: ").Append(Hidecachesetting).Append("\n");
            sb.Append("  Indefiniteperm: ").Append(Indefiniteperm).Append("\n");
            sb.Append("  Maxpassexpireddays: ").Append(Maxpassexpireddays).Append("\n");
            sb.Append("  Owasurl: ").Append(Owasurl).Append("\n");
            sb.Append("  Rememberpass: ").Append(Rememberpass).Append("\n");
            sb.Append("  Sursenpreview: ").Append(Sursenpreview).Append("\n");
            sb.Append("  Wopiurl: ").Append(Wopiurl).Append("\n");
            sb.Append("  Cadtool: ").Append(Cadtool).Append("\n");
            sb.Append("  Cadurl: ").Append(Cadurl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Auth1GetconfigResOemconfig);
        }

        /// <summary>
        /// Returns true if Auth1GetconfigResOemconfig instances are equal
        /// </summary>
        /// <param name="input">Instance of Auth1GetconfigResOemconfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Auth1GetconfigResOemconfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Allowauthlowcsfuser == input.Allowauthlowcsfuser ||
                    (this.Allowauthlowcsfuser != null &&
                    this.Allowauthlowcsfuser.Equals(input.Allowauthlowcsfuser))
                ) && 
                (
                    this.Allowowner == input.Allowowner ||
                    (this.Allowowner != null &&
                    this.Allowowner.Equals(input.Allowowner))
                ) && 
                (
                    this.Cadpreview == input.Cadpreview ||
                    (this.Cadpreview != null &&
                    this.Cadpreview.Equals(input.Cadpreview))
                ) && 
                (
                    this.Clearcache == input.Clearcache ||
                    (this.Clearcache != null &&
                    this.Clearcache.Equals(input.Clearcache))
                ) && 
                (
                    this.Clientlogouttime == input.Clientlogouttime ||
                    (this.Clientlogouttime != null &&
                    this.Clientlogouttime.Equals(input.Clientlogouttime))
                ) && 
                (
                    this.Defaultpermexpireddays == input.Defaultpermexpireddays ||
                    (this.Defaultpermexpireddays != null &&
                    this.Defaultpermexpireddays.Equals(input.Defaultpermexpireddays))
                ) && 
                (
                    this.Enableclientmanuallogin == input.Enableclientmanuallogin ||
                    (this.Enableclientmanuallogin != null &&
                    this.Enableclientmanuallogin.Equals(input.Enableclientmanuallogin))
                ) && 
                (
                    this.Enablecsflevel == input.Enablecsflevel ||
                    (this.Enablecsflevel != null &&
                    this.Enablecsflevel.Equals(input.Enablecsflevel))
                ) && 
                (
                    this.Enablefiletransferlimit == input.Enablefiletransferlimit ||
                    (this.Enablefiletransferlimit != null &&
                    this.Enablefiletransferlimit.Equals(input.Enablefiletransferlimit))
                ) && 
                (
                    this.Enablehttplinkaudit == input.Enablehttplinkaudit ||
                    (this.Enablehttplinkaudit != null &&
                    this.Enablehttplinkaudit.Equals(input.Enablehttplinkaudit))
                ) && 
                (
                    this.Enableonedrive == input.Enableonedrive ||
                    (this.Enableonedrive != null &&
                    this.Enableonedrive.Equals(input.Enableonedrive))
                ) && 
                (
                    this.Enableshareaudit == input.Enableshareaudit ||
                    (this.Enableshareaudit != null &&
                    this.Enableshareaudit.Equals(input.Enableshareaudit))
                ) && 
                (
                    this.Enableuseragreement == input.Enableuseragreement ||
                    (this.Enableuseragreement != null &&
                    this.Enableuseragreement.Equals(input.Enableuseragreement))
                ) && 
                (
                    this.Hidecachesetting == input.Hidecachesetting ||
                    (this.Hidecachesetting != null &&
                    this.Hidecachesetting.Equals(input.Hidecachesetting))
                ) && 
                (
                    this.Indefiniteperm == input.Indefiniteperm ||
                    (this.Indefiniteperm != null &&
                    this.Indefiniteperm.Equals(input.Indefiniteperm))
                ) && 
                (
                    this.Maxpassexpireddays == input.Maxpassexpireddays ||
                    (this.Maxpassexpireddays != null &&
                    this.Maxpassexpireddays.Equals(input.Maxpassexpireddays))
                ) && 
                (
                    this.Owasurl == input.Owasurl ||
                    (this.Owasurl != null &&
                    this.Owasurl.Equals(input.Owasurl))
                ) && 
                (
                    this.Rememberpass == input.Rememberpass ||
                    (this.Rememberpass != null &&
                    this.Rememberpass.Equals(input.Rememberpass))
                ) && 
                (
                    this.Sursenpreview == input.Sursenpreview ||
                    (this.Sursenpreview != null &&
                    this.Sursenpreview.Equals(input.Sursenpreview))
                ) && 
                (
                    this.Wopiurl == input.Wopiurl ||
                    (this.Wopiurl != null &&
                    this.Wopiurl.Equals(input.Wopiurl))
                ) && 
                (
                    this.Cadtool == input.Cadtool ||
                    (this.Cadtool != null &&
                    this.Cadtool.Equals(input.Cadtool))
                ) && 
                (
                    this.Cadurl == input.Cadurl ||
                    (this.Cadurl != null &&
                    this.Cadurl.Equals(input.Cadurl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Allowauthlowcsfuser != null)
                    hashCode = hashCode * 59 + this.Allowauthlowcsfuser.GetHashCode();
                if (this.Allowowner != null)
                    hashCode = hashCode * 59 + this.Allowowner.GetHashCode();
                if (this.Cadpreview != null)
                    hashCode = hashCode * 59 + this.Cadpreview.GetHashCode();
                if (this.Clearcache != null)
                    hashCode = hashCode * 59 + this.Clearcache.GetHashCode();
                if (this.Clientlogouttime != null)
                    hashCode = hashCode * 59 + this.Clientlogouttime.GetHashCode();
                if (this.Defaultpermexpireddays != null)
                    hashCode = hashCode * 59 + this.Defaultpermexpireddays.GetHashCode();
                if (this.Enableclientmanuallogin != null)
                    hashCode = hashCode * 59 + this.Enableclientmanuallogin.GetHashCode();
                if (this.Enablecsflevel != null)
                    hashCode = hashCode * 59 + this.Enablecsflevel.GetHashCode();
                if (this.Enablefiletransferlimit != null)
                    hashCode = hashCode * 59 + this.Enablefiletransferlimit.GetHashCode();
                if (this.Enablehttplinkaudit != null)
                    hashCode = hashCode * 59 + this.Enablehttplinkaudit.GetHashCode();
                if (this.Enableonedrive != null)
                    hashCode = hashCode * 59 + this.Enableonedrive.GetHashCode();
                if (this.Enableshareaudit != null)
                    hashCode = hashCode * 59 + this.Enableshareaudit.GetHashCode();
                if (this.Enableuseragreement != null)
                    hashCode = hashCode * 59 + this.Enableuseragreement.GetHashCode();
                if (this.Hidecachesetting != null)
                    hashCode = hashCode * 59 + this.Hidecachesetting.GetHashCode();
                if (this.Indefiniteperm != null)
                    hashCode = hashCode * 59 + this.Indefiniteperm.GetHashCode();
                if (this.Maxpassexpireddays != null)
                    hashCode = hashCode * 59 + this.Maxpassexpireddays.GetHashCode();
                if (this.Owasurl != null)
                    hashCode = hashCode * 59 + this.Owasurl.GetHashCode();
                if (this.Rememberpass != null)
                    hashCode = hashCode * 59 + this.Rememberpass.GetHashCode();
                if (this.Sursenpreview != null)
                    hashCode = hashCode * 59 + this.Sursenpreview.GetHashCode();
                if (this.Wopiurl != null)
                    hashCode = hashCode * 59 + this.Wopiurl.GetHashCode();
                if (this.Cadtool != null)
                    hashCode = hashCode * 59 + this.Cadtool.GetHashCode();
                if (this.Cadurl != null)
                    hashCode = hashCode * 59 + this.Cadurl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
