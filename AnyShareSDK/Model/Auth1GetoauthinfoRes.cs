/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// Auth1GetoauthinfoRes
    /// </summary>
    [DataContract]
    public partial class Auth1GetoauthinfoRes :  IEquatable<Auth1GetoauthinfoRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Auth1GetoauthinfoRes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Auth1GetoauthinfoRes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Auth1GetoauthinfoRes" /> class.
        /// </summary>
        /// <param name="isenabled">是否开启 (required).</param>
        /// <param name="authurl">完整的OAuth认证地址 (required).</param>
        /// <param name="authserver">认证服务器地址 (required).</param>
        /// <param name="redirectserver">第三方认证完毕后，跳转到AnyShare服务器的地址 (required).</param>
        public Auth1GetoauthinfoRes(bool? isenabled = default(bool?), string authurl = default(string), string authserver = default(string), string redirectserver = default(string))
        {
            this.Isenabled = isenabled;
            this.Authurl = authurl;
            this.Authserver = authserver;
            this.Redirectserver = redirectserver;
        }
        
        /// <summary>
        /// 是否开启
        /// </summary>
        /// <value>是否开启</value>
        [DataMember(Name="isenabled", EmitDefaultValue=false)]
        public bool? Isenabled { get; set; }

        /// <summary>
        /// 完整的OAuth认证地址
        /// </summary>
        /// <value>完整的OAuth认证地址</value>
        [DataMember(Name="authurl", EmitDefaultValue=false)]
        public string Authurl { get; set; }

        /// <summary>
        /// 认证服务器地址
        /// </summary>
        /// <value>认证服务器地址</value>
        [DataMember(Name="authserver", EmitDefaultValue=false)]
        public string Authserver { get; set; }

        /// <summary>
        /// 第三方认证完毕后，跳转到AnyShare服务器的地址
        /// </summary>
        /// <value>第三方认证完毕后，跳转到AnyShare服务器的地址</value>
        [DataMember(Name="redirectserver", EmitDefaultValue=false)]
        public string Redirectserver { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Auth1GetoauthinfoRes {\n");
            sb.Append("  Isenabled: ").Append(Isenabled).Append("\n");
            sb.Append("  Authurl: ").Append(Authurl).Append("\n");
            sb.Append("  Authserver: ").Append(Authserver).Append("\n");
            sb.Append("  Redirectserver: ").Append(Redirectserver).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Auth1GetoauthinfoRes);
        }

        /// <summary>
        /// Returns true if Auth1GetoauthinfoRes instances are equal
        /// </summary>
        /// <param name="input">Instance of Auth1GetoauthinfoRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Auth1GetoauthinfoRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Isenabled == input.Isenabled ||
                    (this.Isenabled != null &&
                    this.Isenabled.Equals(input.Isenabled))
                ) && 
                (
                    this.Authurl == input.Authurl ||
                    (this.Authurl != null &&
                    this.Authurl.Equals(input.Authurl))
                ) && 
                (
                    this.Authserver == input.Authserver ||
                    (this.Authserver != null &&
                    this.Authserver.Equals(input.Authserver))
                ) && 
                (
                    this.Redirectserver == input.Redirectserver ||
                    (this.Redirectserver != null &&
                    this.Redirectserver.Equals(input.Redirectserver))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Isenabled != null)
                    hashCode = hashCode * 59 + this.Isenabled.GetHashCode();
                if (this.Authurl != null)
                    hashCode = hashCode * 59 + this.Authurl.GetHashCode();
                if (this.Authserver != null)
                    hashCode = hashCode * 59 + this.Authserver.GetHashCode();
                if (this.Redirectserver != null)
                    hashCode = hashCode * 59 + this.Redirectserver.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
