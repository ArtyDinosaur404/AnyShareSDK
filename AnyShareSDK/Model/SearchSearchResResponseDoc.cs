/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// SearchSearchResResponseDoc
    /// </summary>
    [DataContract]
    public partial class SearchSearchResResponseDoc :  IEquatable<SearchSearchResResponseDoc>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchSearchResResponseDoc" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchSearchResResponseDoc() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchSearchResResponseDoc" /> class.
        /// </summary>
        /// <param name="basename">文件名（不包括扩展名） (required).</param>
        /// <param name="csflevel">文件密级 (required).</param>
        /// <param name="modified">文件修改时间.</param>
        /// <param name="size">文件大小 (required).</param>
        /// <param name="parentpath">父目录 (required).</param>
        /// <param name="ext">文件扩展名.</param>
        /// <param name="docid">gns路径 (required).</param>
        /// <param name="editor">文件创建者.</param>
        /// <param name="access">是否有权限访问，1为有权限，0为无权限 (required).</param>
        /// <param name="sharer">发现者名称：如果有返回且不为空，说明该文档是发现文档.</param>
        /// <param name="tags">版本的标签字符串数组.</param>
        /// <param name="created">文档创建时间 (required).</param>
        /// <param name="creator">文档创建者 (required).</param>
        /// <param name="objtype">文档类型，1 为文件 2为目录  注：6.0.4版本后新建的文件索引才有该字段。  未重建索引时，请勿用作判断条件。  .</param>
        public SearchSearchResResponseDoc(string basename = default(string), long? csflevel = default(long?), long? modified = default(long?), long? size = default(long?), string parentpath = default(string), string ext = default(string), string docid = default(string), string editor = default(string), long? access = default(long?), string sharer = default(string), List<string> tags = default(List<string>), string created = default(string), string creator = default(string), long? objtype = default(long?))
        {
            this.Basename = basename;
            this.Csflevel = csflevel;
            this.Size = size;
            this.Parentpath = parentpath;
            this.Docid = docid;
            this.Access = access;
            this.Created = created;
            this.Creator = creator;
            this.Modified = modified;
            this.Ext = ext;
            this.Editor = editor;
            this.Sharer = sharer;
            this.Tags = tags;
            this.Objtype = objtype;
        }
        
        /// <summary>
        /// 文件名（不包括扩展名）
        /// </summary>
        /// <value>文件名（不包括扩展名）</value>
        [DataMember(Name="basename", EmitDefaultValue=false)]
        public string Basename { get; set; }

        /// <summary>
        /// 文件密级
        /// </summary>
        /// <value>文件密级</value>
        [DataMember(Name="csflevel", EmitDefaultValue=false)]
        public long? Csflevel { get; set; }

        /// <summary>
        /// 文件修改时间
        /// </summary>
        /// <value>文件修改时间</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public long? Modified { get; set; }

        /// <summary>
        /// 文件大小
        /// </summary>
        /// <value>文件大小</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long? Size { get; set; }

        /// <summary>
        /// 父目录
        /// </summary>
        /// <value>父目录</value>
        [DataMember(Name="parentpath", EmitDefaultValue=false)]
        public string Parentpath { get; set; }

        /// <summary>
        /// 文件扩展名
        /// </summary>
        /// <value>文件扩展名</value>
        [DataMember(Name="ext", EmitDefaultValue=false)]
        public string Ext { get; set; }

        /// <summary>
        /// gns路径
        /// </summary>
        /// <value>gns路径</value>
        [DataMember(Name="docid", EmitDefaultValue=false)]
        public string Docid { get; set; }

        /// <summary>
        /// 文件创建者
        /// </summary>
        /// <value>文件创建者</value>
        [DataMember(Name="editor", EmitDefaultValue=false)]
        public string Editor { get; set; }

        /// <summary>
        /// 是否有权限访问，1为有权限，0为无权限
        /// </summary>
        /// <value>是否有权限访问，1为有权限，0为无权限</value>
        [DataMember(Name="access", EmitDefaultValue=false)]
        public long? Access { get; set; }

        /// <summary>
        /// 发现者名称：如果有返回且不为空，说明该文档是发现文档
        /// </summary>
        /// <value>发现者名称：如果有返回且不为空，说明该文档是发现文档</value>
        [DataMember(Name="sharer", EmitDefaultValue=false)]
        public string Sharer { get; set; }

        /// <summary>
        /// 版本的标签字符串数组
        /// </summary>
        /// <value>版本的标签字符串数组</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// 文档创建时间
        /// </summary>
        /// <value>文档创建时间</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public string Created { get; set; }

        /// <summary>
        /// 文档创建者
        /// </summary>
        /// <value>文档创建者</value>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public string Creator { get; set; }

        /// <summary>
        /// 文档类型，1 为文件 2为目录  注：6.0.4版本后新建的文件索引才有该字段。  未重建索引时，请勿用作判断条件。  
        /// </summary>
        /// <value>文档类型，1 为文件 2为目录  注：6.0.4版本后新建的文件索引才有该字段。  未重建索引时，请勿用作判断条件。  </value>
        [DataMember(Name="objtype", EmitDefaultValue=false)]
        public long? Objtype { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchSearchResResponseDoc {\n");
            sb.Append("  Basename: ").Append(Basename).Append("\n");
            sb.Append("  Csflevel: ").Append(Csflevel).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Parentpath: ").Append(Parentpath).Append("\n");
            sb.Append("  Ext: ").Append(Ext).Append("\n");
            sb.Append("  Docid: ").Append(Docid).Append("\n");
            sb.Append("  Editor: ").Append(Editor).Append("\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  Sharer: ").Append(Sharer).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Objtype: ").Append(Objtype).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchSearchResResponseDoc);
        }

        /// <summary>
        /// Returns true if SearchSearchResResponseDoc instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchSearchResResponseDoc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchSearchResResponseDoc input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Basename == input.Basename ||
                    (this.Basename != null &&
                    this.Basename.Equals(input.Basename))
                ) && 
                (
                    this.Csflevel == input.Csflevel ||
                    (this.Csflevel != null &&
                    this.Csflevel.Equals(input.Csflevel))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Parentpath == input.Parentpath ||
                    (this.Parentpath != null &&
                    this.Parentpath.Equals(input.Parentpath))
                ) && 
                (
                    this.Ext == input.Ext ||
                    (this.Ext != null &&
                    this.Ext.Equals(input.Ext))
                ) && 
                (
                    this.Docid == input.Docid ||
                    (this.Docid != null &&
                    this.Docid.Equals(input.Docid))
                ) && 
                (
                    this.Editor == input.Editor ||
                    (this.Editor != null &&
                    this.Editor.Equals(input.Editor))
                ) && 
                (
                    this.Access == input.Access ||
                    (this.Access != null &&
                    this.Access.Equals(input.Access))
                ) && 
                (
                    this.Sharer == input.Sharer ||
                    (this.Sharer != null &&
                    this.Sharer.Equals(input.Sharer))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.Objtype == input.Objtype ||
                    (this.Objtype != null &&
                    this.Objtype.Equals(input.Objtype))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Basename != null)
                    hashCode = hashCode * 59 + this.Basename.GetHashCode();
                if (this.Csflevel != null)
                    hashCode = hashCode * 59 + this.Csflevel.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Parentpath != null)
                    hashCode = hashCode * 59 + this.Parentpath.GetHashCode();
                if (this.Ext != null)
                    hashCode = hashCode * 59 + this.Ext.GetHashCode();
                if (this.Docid != null)
                    hashCode = hashCode * 59 + this.Docid.GetHashCode();
                if (this.Editor != null)
                    hashCode = hashCode * 59 + this.Editor.GetHashCode();
                if (this.Access != null)
                    hashCode = hashCode * 59 + this.Access.GetHashCode();
                if (this.Sharer != null)
                    hashCode = hashCode * 59 + this.Sharer.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.Creator != null)
                    hashCode = hashCode * 59 + this.Creator.GetHashCode();
                if (this.Objtype != null)
                    hashCode = hashCode * 59 + this.Objtype.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
