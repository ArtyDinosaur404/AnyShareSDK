/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// LinkGetRes
    /// </summary>
    [DataContract]
    public partial class LinkGetRes :  IEquatable<LinkGetRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkGetRes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LinkGetRes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkGetRes" /> class.
        /// </summary>
        /// <param name="name">文件名 (required).</param>
        /// <param name="size">文件大小 (required).</param>
        /// <param name="modified">目录修改时间/文件上传时间，UTC时间，此为文件上传到服务器时间 (required).</param>
        /// <param name="perm">按位存储的权限值（返回的是十进制），获取该值后，需要转化成二级制，检查对应的位码是否被设置。  右数第一位表示该外链可以被预览  右数第二位表示该外链可以被下载  右数第三位表示该外链可以上传文件  例如：返回1表示只能被预览  返回2表示只能被下载  返回4表示只能上传文件  返回3表示可被预览和下载   (required).</param>
        /// <param name="endtime">到期时间，单位：微秒 (required).</param>
        /// <param name="usrdisplayname">用户显示名 (required).</param>
        /// <param name="usrloginname">用户登录名 (required).</param>
        /// <param name="clientMtime">客户端设置的文件本地修改时间 (required).</param>
        /// <param name="docid">文档ID (required).</param>
        public LinkGetRes(string name = default(string), long? size = default(long?), long? modified = default(long?), long? perm = default(long?), long? endtime = default(long?), string usrdisplayname = default(string), string usrloginname = default(string), long? clientMtime = default(long?), string docid = default(string))
        {
            this.Name = name;
            this.Size = size;
            this.Modified = modified;
            this.Perm = perm;
            this.Endtime = endtime;
            this.Usrdisplayname = usrdisplayname;
            this.Usrloginname = usrloginname;
            this.ClientMtime = clientMtime;
            this.Docid = docid;
        }
        
        /// <summary>
        /// 文件名
        /// </summary>
        /// <value>文件名</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 文件大小
        /// </summary>
        /// <value>文件大小</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long? Size { get; set; }

        /// <summary>
        /// 目录修改时间/文件上传时间，UTC时间，此为文件上传到服务器时间
        /// </summary>
        /// <value>目录修改时间/文件上传时间，UTC时间，此为文件上传到服务器时间</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public long? Modified { get; set; }

        /// <summary>
        /// 按位存储的权限值（返回的是十进制），获取该值后，需要转化成二级制，检查对应的位码是否被设置。  右数第一位表示该外链可以被预览  右数第二位表示该外链可以被下载  右数第三位表示该外链可以上传文件  例如：返回1表示只能被预览  返回2表示只能被下载  返回4表示只能上传文件  返回3表示可被预览和下载  
        /// </summary>
        /// <value>按位存储的权限值（返回的是十进制），获取该值后，需要转化成二级制，检查对应的位码是否被设置。  右数第一位表示该外链可以被预览  右数第二位表示该外链可以被下载  右数第三位表示该外链可以上传文件  例如：返回1表示只能被预览  返回2表示只能被下载  返回4表示只能上传文件  返回3表示可被预览和下载  </value>
        [DataMember(Name="perm", EmitDefaultValue=false)]
        public long? Perm { get; set; }

        /// <summary>
        /// 到期时间，单位：微秒
        /// </summary>
        /// <value>到期时间，单位：微秒</value>
        [DataMember(Name="endtime", EmitDefaultValue=false)]
        public long? Endtime { get; set; }

        /// <summary>
        /// 用户显示名
        /// </summary>
        /// <value>用户显示名</value>
        [DataMember(Name="usrdisplayname", EmitDefaultValue=false)]
        public string Usrdisplayname { get; set; }

        /// <summary>
        /// 用户登录名
        /// </summary>
        /// <value>用户登录名</value>
        [DataMember(Name="usrloginname", EmitDefaultValue=false)]
        public string Usrloginname { get; set; }

        /// <summary>
        /// 客户端设置的文件本地修改时间
        /// </summary>
        /// <value>客户端设置的文件本地修改时间</value>
        [DataMember(Name="client_mtime", EmitDefaultValue=false)]
        public long? ClientMtime { get; set; }

        /// <summary>
        /// 文档ID
        /// </summary>
        /// <value>文档ID</value>
        [DataMember(Name="docid", EmitDefaultValue=false)]
        public string Docid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinkGetRes {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Perm: ").Append(Perm).Append("\n");
            sb.Append("  Endtime: ").Append(Endtime).Append("\n");
            sb.Append("  Usrdisplayname: ").Append(Usrdisplayname).Append("\n");
            sb.Append("  Usrloginname: ").Append(Usrloginname).Append("\n");
            sb.Append("  ClientMtime: ").Append(ClientMtime).Append("\n");
            sb.Append("  Docid: ").Append(Docid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkGetRes);
        }

        /// <summary>
        /// Returns true if LinkGetRes instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkGetRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkGetRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.Perm == input.Perm ||
                    (this.Perm != null &&
                    this.Perm.Equals(input.Perm))
                ) && 
                (
                    this.Endtime == input.Endtime ||
                    (this.Endtime != null &&
                    this.Endtime.Equals(input.Endtime))
                ) && 
                (
                    this.Usrdisplayname == input.Usrdisplayname ||
                    (this.Usrdisplayname != null &&
                    this.Usrdisplayname.Equals(input.Usrdisplayname))
                ) && 
                (
                    this.Usrloginname == input.Usrloginname ||
                    (this.Usrloginname != null &&
                    this.Usrloginname.Equals(input.Usrloginname))
                ) && 
                (
                    this.ClientMtime == input.ClientMtime ||
                    (this.ClientMtime != null &&
                    this.ClientMtime.Equals(input.ClientMtime))
                ) && 
                (
                    this.Docid == input.Docid ||
                    (this.Docid != null &&
                    this.Docid.Equals(input.Docid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.Perm != null)
                    hashCode = hashCode * 59 + this.Perm.GetHashCode();
                if (this.Endtime != null)
                    hashCode = hashCode * 59 + this.Endtime.GetHashCode();
                if (this.Usrdisplayname != null)
                    hashCode = hashCode * 59 + this.Usrdisplayname.GetHashCode();
                if (this.Usrloginname != null)
                    hashCode = hashCode * 59 + this.Usrloginname.GetHashCode();
                if (this.ClientMtime != null)
                    hashCode = hashCode * 59 + this.ClientMtime.GetHashCode();
                if (this.Docid != null)
                    hashCode = hashCode * 59 + this.Docid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
