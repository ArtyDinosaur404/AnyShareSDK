/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// DeviceListResDeviceinfo
    /// </summary>
    [DataContract]
    public partial class DeviceListResDeviceinfo :  IEquatable<DeviceListResDeviceinfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceListResDeviceinfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeviceListResDeviceinfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceListResDeviceinfo" /> class.
        /// </summary>
        /// <param name="name">设备名称 (required).</param>
        /// <param name="ostype">操作系统类型  0：Unknown  1：IOS  2：Android  3：Windows phone  4：Windows  5：MacOSX  6：Web  7：MobileWeb (required).</param>
        /// <param name="devicetype">设备硬件类型，自定义，例如：  iphone5s  ipad  联想一体机  mac (required).</param>
        /// <param name="udid">设备唯一标识号 (required).</param>
        /// <param name="lastloginip">上次登录ip (required).</param>
        /// <param name="lastlogintime">上次登录时间 (required).</param>
        /// <param name="eraseflag">缓存数据擦除状态  0表示正常  1表示正在请求擦除 (required).</param>
        /// <param name="lasterasetime">上次成功清除缓存的时间 (required).</param>
        /// <param name="disableflag">设备禁用状态  0表示未禁用  1表示已禁用 (required).</param>
        /// <param name="loginflag">设备登录状态  0表示未登录  1表示已登录 (required).</param>
        /// <param name="bindflag">设备绑定状态  0表示未绑定  1表示已绑定 (required).</param>
        public DeviceListResDeviceinfo(string name = default(string), long? ostype = default(long?), string devicetype = default(string), string udid = default(string), string lastloginip = default(string), long? lastlogintime = default(long?), long? eraseflag = default(long?), long? lasterasetime = default(long?), long? disableflag = default(long?), long? loginflag = default(long?), long? bindflag = default(long?))
        {
            this.Name = name;
            this.Ostype = ostype;
            this.Devicetype = devicetype;
            this.Udid = udid;
            this.Lastloginip = lastloginip;
            this.Lastlogintime = lastlogintime;
            this.Eraseflag = eraseflag;
            this.Lasterasetime = lasterasetime;
            this.Disableflag = disableflag;
            this.Loginflag = loginflag;
            this.Bindflag = bindflag;
        }
        
        /// <summary>
        /// 设备名称
        /// </summary>
        /// <value>设备名称</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 操作系统类型  0：Unknown  1：IOS  2：Android  3：Windows phone  4：Windows  5：MacOSX  6：Web  7：MobileWeb
        /// </summary>
        /// <value>操作系统类型  0：Unknown  1：IOS  2：Android  3：Windows phone  4：Windows  5：MacOSX  6：Web  7：MobileWeb</value>
        [DataMember(Name="ostype", EmitDefaultValue=false)]
        public long? Ostype { get; set; }

        /// <summary>
        /// 设备硬件类型，自定义，例如：  iphone5s  ipad  联想一体机  mac
        /// </summary>
        /// <value>设备硬件类型，自定义，例如：  iphone5s  ipad  联想一体机  mac</value>
        [DataMember(Name="devicetype", EmitDefaultValue=false)]
        public string Devicetype { get; set; }

        /// <summary>
        /// 设备唯一标识号
        /// </summary>
        /// <value>设备唯一标识号</value>
        [DataMember(Name="udid", EmitDefaultValue=false)]
        public string Udid { get; set; }

        /// <summary>
        /// 上次登录ip
        /// </summary>
        /// <value>上次登录ip</value>
        [DataMember(Name="lastloginip", EmitDefaultValue=false)]
        public string Lastloginip { get; set; }

        /// <summary>
        /// 上次登录时间
        /// </summary>
        /// <value>上次登录时间</value>
        [DataMember(Name="lastlogintime", EmitDefaultValue=false)]
        public long? Lastlogintime { get; set; }

        /// <summary>
        /// 缓存数据擦除状态  0表示正常  1表示正在请求擦除
        /// </summary>
        /// <value>缓存数据擦除状态  0表示正常  1表示正在请求擦除</value>
        [DataMember(Name="eraseflag", EmitDefaultValue=false)]
        public long? Eraseflag { get; set; }

        /// <summary>
        /// 上次成功清除缓存的时间
        /// </summary>
        /// <value>上次成功清除缓存的时间</value>
        [DataMember(Name="lasterasetime", EmitDefaultValue=false)]
        public long? Lasterasetime { get; set; }

        /// <summary>
        /// 设备禁用状态  0表示未禁用  1表示已禁用
        /// </summary>
        /// <value>设备禁用状态  0表示未禁用  1表示已禁用</value>
        [DataMember(Name="disableflag", EmitDefaultValue=false)]
        public long? Disableflag { get; set; }

        /// <summary>
        /// 设备登录状态  0表示未登录  1表示已登录
        /// </summary>
        /// <value>设备登录状态  0表示未登录  1表示已登录</value>
        [DataMember(Name="loginflag", EmitDefaultValue=false)]
        public long? Loginflag { get; set; }

        /// <summary>
        /// 设备绑定状态  0表示未绑定  1表示已绑定
        /// </summary>
        /// <value>设备绑定状态  0表示未绑定  1表示已绑定</value>
        [DataMember(Name="bindflag", EmitDefaultValue=false)]
        public long? Bindflag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceListResDeviceinfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ostype: ").Append(Ostype).Append("\n");
            sb.Append("  Devicetype: ").Append(Devicetype).Append("\n");
            sb.Append("  Udid: ").Append(Udid).Append("\n");
            sb.Append("  Lastloginip: ").Append(Lastloginip).Append("\n");
            sb.Append("  Lastlogintime: ").Append(Lastlogintime).Append("\n");
            sb.Append("  Eraseflag: ").Append(Eraseflag).Append("\n");
            sb.Append("  Lasterasetime: ").Append(Lasterasetime).Append("\n");
            sb.Append("  Disableflag: ").Append(Disableflag).Append("\n");
            sb.Append("  Loginflag: ").Append(Loginflag).Append("\n");
            sb.Append("  Bindflag: ").Append(Bindflag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeviceListResDeviceinfo);
        }

        /// <summary>
        /// Returns true if DeviceListResDeviceinfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DeviceListResDeviceinfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceListResDeviceinfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Ostype == input.Ostype ||
                    (this.Ostype != null &&
                    this.Ostype.Equals(input.Ostype))
                ) && 
                (
                    this.Devicetype == input.Devicetype ||
                    (this.Devicetype != null &&
                    this.Devicetype.Equals(input.Devicetype))
                ) && 
                (
                    this.Udid == input.Udid ||
                    (this.Udid != null &&
                    this.Udid.Equals(input.Udid))
                ) && 
                (
                    this.Lastloginip == input.Lastloginip ||
                    (this.Lastloginip != null &&
                    this.Lastloginip.Equals(input.Lastloginip))
                ) && 
                (
                    this.Lastlogintime == input.Lastlogintime ||
                    (this.Lastlogintime != null &&
                    this.Lastlogintime.Equals(input.Lastlogintime))
                ) && 
                (
                    this.Eraseflag == input.Eraseflag ||
                    (this.Eraseflag != null &&
                    this.Eraseflag.Equals(input.Eraseflag))
                ) && 
                (
                    this.Lasterasetime == input.Lasterasetime ||
                    (this.Lasterasetime != null &&
                    this.Lasterasetime.Equals(input.Lasterasetime))
                ) && 
                (
                    this.Disableflag == input.Disableflag ||
                    (this.Disableflag != null &&
                    this.Disableflag.Equals(input.Disableflag))
                ) && 
                (
                    this.Loginflag == input.Loginflag ||
                    (this.Loginflag != null &&
                    this.Loginflag.Equals(input.Loginflag))
                ) && 
                (
                    this.Bindflag == input.Bindflag ||
                    (this.Bindflag != null &&
                    this.Bindflag.Equals(input.Bindflag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Ostype != null)
                    hashCode = hashCode * 59 + this.Ostype.GetHashCode();
                if (this.Devicetype != null)
                    hashCode = hashCode * 59 + this.Devicetype.GetHashCode();
                if (this.Udid != null)
                    hashCode = hashCode * 59 + this.Udid.GetHashCode();
                if (this.Lastloginip != null)
                    hashCode = hashCode * 59 + this.Lastloginip.GetHashCode();
                if (this.Lastlogintime != null)
                    hashCode = hashCode * 59 + this.Lastlogintime.GetHashCode();
                if (this.Eraseflag != null)
                    hashCode = hashCode * 59 + this.Eraseflag.GetHashCode();
                if (this.Lasterasetime != null)
                    hashCode = hashCode * 59 + this.Lasterasetime.GetHashCode();
                if (this.Disableflag != null)
                    hashCode = hashCode * 59 + this.Disableflag.GetHashCode();
                if (this.Loginflag != null)
                    hashCode = hashCode * 59 + this.Loginflag.GetHashCode();
                if (this.Bindflag != null)
                    hashCode = hashCode * 59 + this.Bindflag.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
