/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// DirListRes
    /// </summary>
    [DataContract]
    public partial class DirListRes :  IEquatable<DirListRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DirListRes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DirListRes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DirListRes" /> class.
        /// </summary>
        /// <param name="dirs">文件夹信息 (required).</param>
        /// <param name="files">文件信息 (required).</param>
        public DirListRes(List<DirListResDir> dirs = default(List<DirListResDir>), List<DirListResFile> files = default(List<DirListResFile>))
        {
            this.Dirs = dirs;
            this.Files = files;
        }
        
        /// <summary>
        /// 文件夹信息
        /// </summary>
        /// <value>文件夹信息</value>
        [DataMember(Name="dirs", EmitDefaultValue=false)]
        public List<DirListResDir> Dirs { get; set; }

        /// <summary>
        /// 文件信息
        /// </summary>
        /// <value>文件信息</value>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<DirListResFile> Files { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DirListRes {\n");
            sb.Append("  Dirs: ").Append(Dirs).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DirListRes);
        }

        /// <summary>
        /// Returns true if DirListRes instances are equal
        /// </summary>
        /// <param name="input">Instance of DirListRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirListRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dirs == input.Dirs ||
                    this.Dirs != null &&
                    input.Dirs != null &&
                    this.Dirs.SequenceEqual(input.Dirs)
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    input.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dirs != null)
                    hashCode = hashCode * 59 + this.Dirs.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
