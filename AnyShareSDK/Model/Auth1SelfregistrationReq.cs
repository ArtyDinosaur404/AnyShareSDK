/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// Auth1SelfregistrationReq
    /// </summary>
    [DataContract]
    public partial class Auth1SelfregistrationReq :  IEquatable<Auth1SelfregistrationReq>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Auth1SelfregistrationReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Auth1SelfregistrationReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Auth1SelfregistrationReq" /> class.
        /// </summary>
        /// <param name="registerid">注册号 (required).</param>
        /// <param name="certid">身份证号 (required).</param>
        /// <param name="realname">真实姓名 (required).</param>
        /// <param name="password">用户密码（采用RSA加密并将加密结果使用base64编码） (required).</param>
        public Auth1SelfregistrationReq(string registerid = default(string), string certid = default(string), string realname = default(string), string password = default(string))
        {
            this.Registerid = registerid;
            this.Certid = certid;
            this.Realname = realname;
            this.Password = password;
        }
        
        /// <summary>
        /// 注册号
        /// </summary>
        /// <value>注册号</value>
        [DataMember(Name="registerid", EmitDefaultValue=false)]
        public string Registerid { get; set; }

        /// <summary>
        /// 身份证号
        /// </summary>
        /// <value>身份证号</value>
        [DataMember(Name="certid", EmitDefaultValue=false)]
        public string Certid { get; set; }

        /// <summary>
        /// 真实姓名
        /// </summary>
        /// <value>真实姓名</value>
        [DataMember(Name="realname", EmitDefaultValue=false)]
        public string Realname { get; set; }

        /// <summary>
        /// 用户密码（采用RSA加密并将加密结果使用base64编码）
        /// </summary>
        /// <value>用户密码（采用RSA加密并将加密结果使用base64编码）</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Auth1SelfregistrationReq {\n");
            sb.Append("  Registerid: ").Append(Registerid).Append("\n");
            sb.Append("  Certid: ").Append(Certid).Append("\n");
            sb.Append("  Realname: ").Append(Realname).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Auth1SelfregistrationReq);
        }

        /// <summary>
        /// Returns true if Auth1SelfregistrationReq instances are equal
        /// </summary>
        /// <param name="input">Instance of Auth1SelfregistrationReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Auth1SelfregistrationReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Registerid == input.Registerid ||
                    (this.Registerid != null &&
                    this.Registerid.Equals(input.Registerid))
                ) && 
                (
                    this.Certid == input.Certid ||
                    (this.Certid != null &&
                    this.Certid.Equals(input.Certid))
                ) && 
                (
                    this.Realname == input.Realname ||
                    (this.Realname != null &&
                    this.Realname.Equals(input.Realname))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Registerid != null)
                    hashCode = hashCode * 59 + this.Registerid.GetHashCode();
                if (this.Certid != null)
                    hashCode = hashCode * 59 + this.Certid.GetHashCode();
                if (this.Realname != null)
                    hashCode = hashCode * 59 + this.Realname.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
