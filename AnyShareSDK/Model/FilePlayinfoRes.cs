/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// FilePlayinfoRes
    /// </summary>
    [DataContract]
    public partial class FilePlayinfoRes :  IEquatable<FilePlayinfoRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilePlayinfoRes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FilePlayinfoRes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilePlayinfoRes" /> class.
        /// </summary>
        /// <param name="status">转码状态:    0 未开始转码；1 正在转码；2转码完成   (required).</param>
        /// <param name="odstat">原始画质（音质）：0无此分辨率；1已转码 (required).</param>
        /// <param name="sdstat">标清：0无此分辨率；1已转码 (required).</param>
        /// <param name="docid">转码文件的唯一标识id，转码完成至少一种分辨率，认为完成转码，返回转码文件的id (required).</param>
        /// <param name="remainingTime">转码剩余时间（秒），status为1时返回.</param>
        public FilePlayinfoRes(long? status = default(long?), long? odstat = default(long?), long? sdstat = default(long?), string docid = default(string), long? remainingTime = default(long?))
        {
            this.Status = status;
            this.Odstat = odstat;
            this.Sdstat = sdstat;
            this.Docid = docid;
            this.RemainingTime = remainingTime;
        }
        
        /// <summary>
        /// 转码状态:    0 未开始转码；1 正在转码；2转码完成  
        /// </summary>
        /// <value>转码状态:    0 未开始转码；1 正在转码；2转码完成  </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public long? Status { get; set; }

        /// <summary>
        /// 原始画质（音质）：0无此分辨率；1已转码
        /// </summary>
        /// <value>原始画质（音质）：0无此分辨率；1已转码</value>
        [DataMember(Name="odstat", EmitDefaultValue=false)]
        public long? Odstat { get; set; }

        /// <summary>
        /// 标清：0无此分辨率；1已转码
        /// </summary>
        /// <value>标清：0无此分辨率；1已转码</value>
        [DataMember(Name="sdstat", EmitDefaultValue=false)]
        public long? Sdstat { get; set; }

        /// <summary>
        /// 转码文件的唯一标识id，转码完成至少一种分辨率，认为完成转码，返回转码文件的id
        /// </summary>
        /// <value>转码文件的唯一标识id，转码完成至少一种分辨率，认为完成转码，返回转码文件的id</value>
        [DataMember(Name="docid", EmitDefaultValue=false)]
        public string Docid { get; set; }

        /// <summary>
        /// 转码剩余时间（秒），status为1时返回
        /// </summary>
        /// <value>转码剩余时间（秒），status为1时返回</value>
        [DataMember(Name="remainingTime", EmitDefaultValue=false)]
        public long? RemainingTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilePlayinfoRes {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Odstat: ").Append(Odstat).Append("\n");
            sb.Append("  Sdstat: ").Append(Sdstat).Append("\n");
            sb.Append("  Docid: ").Append(Docid).Append("\n");
            sb.Append("  RemainingTime: ").Append(RemainingTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilePlayinfoRes);
        }

        /// <summary>
        /// Returns true if FilePlayinfoRes instances are equal
        /// </summary>
        /// <param name="input">Instance of FilePlayinfoRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilePlayinfoRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Odstat == input.Odstat ||
                    (this.Odstat != null &&
                    this.Odstat.Equals(input.Odstat))
                ) && 
                (
                    this.Sdstat == input.Sdstat ||
                    (this.Sdstat != null &&
                    this.Sdstat.Equals(input.Sdstat))
                ) && 
                (
                    this.Docid == input.Docid ||
                    (this.Docid != null &&
                    this.Docid.Equals(input.Docid))
                ) && 
                (
                    this.RemainingTime == input.RemainingTime ||
                    (this.RemainingTime != null &&
                    this.RemainingTime.Equals(input.RemainingTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Odstat != null)
                    hashCode = hashCode * 59 + this.Odstat.GetHashCode();
                if (this.Sdstat != null)
                    hashCode = hashCode * 59 + this.Sdstat.GetHashCode();
                if (this.Docid != null)
                    hashCode = hashCode * 59 + this.Docid.GetHashCode();
                if (this.RemainingTime != null)
                    hashCode = hashCode * 59 + this.RemainingTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
