/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// LinkBatchdownloadReq
    /// </summary>
    [DataContract]
    public partial class LinkBatchdownloadReq :  IEquatable<LinkBatchdownloadReq>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkBatchdownloadReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LinkBatchdownloadReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkBatchdownloadReq" /> class.
        /// </summary>
        /// <param name="name">zip压缩包名称 (required).</param>
        /// <param name="reqhost">从存储服务器下载数据时的请求地址 (required).</param>
        /// <param name="usehttps">上传是否使用https，默认为true.</param>
        /// <param name="files">文件GNS数组.</param>
        /// <param name="dirs">文件夹GNS数组.</param>
        /// <param name="link">外链唯一标识 (required).</param>
        /// <param name="password">密码 (required).</param>
        public LinkBatchdownloadReq(string name = default(string), string reqhost = default(string), bool? usehttps = default(bool?), List<string> files = default(List<string>), List<string> dirs = default(List<string>), string link = default(string), string password = default(string))
        {
            this.Name = name;
            this.Reqhost = reqhost;
            this.Link = link;
            this.Password = password;
            this.Usehttps = usehttps;
            this.Files = files;
            this.Dirs = dirs;
        }
        
        /// <summary>
        /// zip压缩包名称
        /// </summary>
        /// <value>zip压缩包名称</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 从存储服务器下载数据时的请求地址
        /// </summary>
        /// <value>从存储服务器下载数据时的请求地址</value>
        [DataMember(Name="reqhost", EmitDefaultValue=false)]
        public string Reqhost { get; set; }

        /// <summary>
        /// 上传是否使用https，默认为true
        /// </summary>
        /// <value>上传是否使用https，默认为true</value>
        [DataMember(Name="usehttps", EmitDefaultValue=false)]
        public bool? Usehttps { get; set; }

        /// <summary>
        /// 文件GNS数组
        /// </summary>
        /// <value>文件GNS数组</value>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<string> Files { get; set; }

        /// <summary>
        /// 文件夹GNS数组
        /// </summary>
        /// <value>文件夹GNS数组</value>
        [DataMember(Name="dirs", EmitDefaultValue=false)]
        public List<string> Dirs { get; set; }

        /// <summary>
        /// 外链唯一标识
        /// </summary>
        /// <value>外链唯一标识</value>
        [DataMember(Name="link", EmitDefaultValue=false)]
        public string Link { get; set; }

        /// <summary>
        /// 密码
        /// </summary>
        /// <value>密码</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinkBatchdownloadReq {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Reqhost: ").Append(Reqhost).Append("\n");
            sb.Append("  Usehttps: ").Append(Usehttps).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Dirs: ").Append(Dirs).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkBatchdownloadReq);
        }

        /// <summary>
        /// Returns true if LinkBatchdownloadReq instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkBatchdownloadReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkBatchdownloadReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Reqhost == input.Reqhost ||
                    (this.Reqhost != null &&
                    this.Reqhost.Equals(input.Reqhost))
                ) && 
                (
                    this.Usehttps == input.Usehttps ||
                    (this.Usehttps != null &&
                    this.Usehttps.Equals(input.Usehttps))
                ) && 
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    input.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                ) && 
                (
                    this.Dirs == input.Dirs ||
                    this.Dirs != null &&
                    input.Dirs != null &&
                    this.Dirs.SequenceEqual(input.Dirs)
                ) && 
                (
                    this.Link == input.Link ||
                    (this.Link != null &&
                    this.Link.Equals(input.Link))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Reqhost != null)
                    hashCode = hashCode * 59 + this.Reqhost.GetHashCode();
                if (this.Usehttps != null)
                    hashCode = hashCode * 59 + this.Usehttps.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                if (this.Dirs != null)
                    hashCode = hashCode * 59 + this.Dirs.GetHashCode();
                if (this.Link != null)
                    hashCode = hashCode * 59 + this.Link.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
