/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// MessageGetResMsgType28AllOf
    /// </summary>
    [DataContract]
    public partial class MessageGetResMsgType28AllOf :  IEquatable<MessageGetResMsgType28AllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageGetResMsgType28AllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageGetResMsgType28AllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageGetResMsgType28AllOf" /> class.
        /// </summary>
        /// <param name="duedate">到期时间 (required).</param>
        /// <param name="remindcontent">消息内容 (required).</param>
        public MessageGetResMsgType28AllOf(long? duedate = default(long?), string remindcontent = default(string))
        {
            this.Duedate = duedate;
            this.Remindcontent = remindcontent;
        }
        
        /// <summary>
        /// 到期时间
        /// </summary>
        /// <value>到期时间</value>
        [DataMember(Name="duedate", EmitDefaultValue=false)]
        public long? Duedate { get; set; }

        /// <summary>
        /// 消息内容
        /// </summary>
        /// <value>消息内容</value>
        [DataMember(Name="remindcontent", EmitDefaultValue=false)]
        public string Remindcontent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageGetResMsgType28AllOf {\n");
            sb.Append("  Duedate: ").Append(Duedate).Append("\n");
            sb.Append("  Remindcontent: ").Append(Remindcontent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageGetResMsgType28AllOf);
        }

        /// <summary>
        /// Returns true if MessageGetResMsgType28AllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageGetResMsgType28AllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageGetResMsgType28AllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Duedate == input.Duedate ||
                    (this.Duedate != null &&
                    this.Duedate.Equals(input.Duedate))
                ) && 
                (
                    this.Remindcontent == input.Remindcontent ||
                    (this.Remindcontent != null &&
                    this.Remindcontent.Equals(input.Remindcontent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Duedate != null)
                    hashCode = hashCode * 59 + this.Duedate.GetHashCode();
                if (this.Remindcontent != null)
                    hashCode = hashCode * 59 + this.Remindcontent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
