/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// UpdateCheckReq
    /// </summary>
    [DataContract]
    public partial class UpdateCheckReq :  IEquatable<UpdateCheckReq>, IValidatableObject
    {
        /// <summary>
        /// 客户端对应的平台
        /// </summary>
        /// <value>客户端对应的平台</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PlatformEnum
        {
            /// <summary>
            /// Enum Windows for value: windows
            /// </summary>
            [EnumMember(Value = "windows")]
            Windows = 1,

            /// <summary>
            /// Enum Mac for value: mac
            /// </summary>
            [EnumMember(Value = "mac")]
            Mac = 2

        }

        /// <summary>
        /// 客户端对应的平台
        /// </summary>
        /// <value>客户端对应的平台</value>
        [DataMember(Name="platform", EmitDefaultValue=false)]
        public PlatformEnum Platform { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCheckReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateCheckReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCheckReq" /> class.
        /// </summary>
        /// <param name="platform">客户端对应的平台 (required).</param>
        /// <param name="arch">客户端的操作系统架构，现在windows只支持“x86”和“x64”， mac平台忽略该字段 (required).</param>
        /// <param name="version">客户端程序的版本，为3.5.3.244形式（主版本号，小版本号，修订号，构建号） (required).</param>
        public UpdateCheckReq(PlatformEnum platform = default(PlatformEnum), string arch = default(string), string version = default(string))
        {
            this.Platform = platform;
            this.Arch = arch;
            this.Version = version;
        }
        

        /// <summary>
        /// 客户端的操作系统架构，现在windows只支持“x86”和“x64”， mac平台忽略该字段
        /// </summary>
        /// <value>客户端的操作系统架构，现在windows只支持“x86”和“x64”， mac平台忽略该字段</value>
        [DataMember(Name="arch", EmitDefaultValue=false)]
        public string Arch { get; set; }

        /// <summary>
        /// 客户端程序的版本，为3.5.3.244形式（主版本号，小版本号，修订号，构建号）
        /// </summary>
        /// <value>客户端程序的版本，为3.5.3.244形式（主版本号，小版本号，修订号，构建号）</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCheckReq {\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Arch: ").Append(Arch).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCheckReq);
        }

        /// <summary>
        /// Returns true if UpdateCheckReq instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCheckReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCheckReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Platform == input.Platform ||
                    (this.Platform != null &&
                    this.Platform.Equals(input.Platform))
                ) && 
                (
                    this.Arch == input.Arch ||
                    (this.Arch != null &&
                    this.Arch.Equals(input.Arch))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Platform != null)
                    hashCode = hashCode * 59 + this.Platform.GetHashCode();
                if (this.Arch != null)
                    hashCode = hashCode * 59 + this.Arch.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
