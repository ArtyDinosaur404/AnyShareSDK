/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// DepartmentSearchResUserInfo
    /// </summary>
    [DataContract]
    public partial class DepartmentSearchResUserInfo :  IEquatable<DepartmentSearchResUserInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentSearchResUserInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DepartmentSearchResUserInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentSearchResUserInfo" /> class.
        /// </summary>
        /// <param name="userid">用户唯一标识 (required).</param>
        /// <param name="account">用户登录账号 (required).</param>
        /// <param name="name">用户显示名 (required).</param>
        /// <param name="mail">用户邮箱地址 (required).</param>
        /// <param name="csflevel">用户密级，5~15 (required).</param>
        /// <param name="depid">用户直属部门id (required).</param>
        /// <param name="depname">用户直属部门名称 (required).</param>
        /// <param name="deppath">部门路径 (required).</param>
        public DepartmentSearchResUserInfo(string userid = default(string), string account = default(string), string name = default(string), string mail = default(string), long? csflevel = default(long?), string depid = default(string), string depname = default(string), string deppath = default(string))
        {
            this.Userid = userid;
            this.Account = account;
            this.Name = name;
            this.Mail = mail;
            this.Csflevel = csflevel;
            this.Depid = depid;
            this.Depname = depname;
            this.Deppath = deppath;
        }
        
        /// <summary>
        /// 用户唯一标识
        /// </summary>
        /// <value>用户唯一标识</value>
        [DataMember(Name="userid", EmitDefaultValue=false)]
        public string Userid { get; set; }

        /// <summary>
        /// 用户登录账号
        /// </summary>
        /// <value>用户登录账号</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// 用户显示名
        /// </summary>
        /// <value>用户显示名</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 用户邮箱地址
        /// </summary>
        /// <value>用户邮箱地址</value>
        [DataMember(Name="mail", EmitDefaultValue=false)]
        public string Mail { get; set; }

        /// <summary>
        /// 用户密级，5~15
        /// </summary>
        /// <value>用户密级，5~15</value>
        [DataMember(Name="csflevel", EmitDefaultValue=false)]
        public long? Csflevel { get; set; }

        /// <summary>
        /// 用户直属部门id
        /// </summary>
        /// <value>用户直属部门id</value>
        [DataMember(Name="depid", EmitDefaultValue=false)]
        public string Depid { get; set; }

        /// <summary>
        /// 用户直属部门名称
        /// </summary>
        /// <value>用户直属部门名称</value>
        [DataMember(Name="depname", EmitDefaultValue=false)]
        public string Depname { get; set; }

        /// <summary>
        /// 部门路径
        /// </summary>
        /// <value>部门路径</value>
        [DataMember(Name="deppath", EmitDefaultValue=false)]
        public string Deppath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DepartmentSearchResUserInfo {\n");
            sb.Append("  Userid: ").Append(Userid).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Mail: ").Append(Mail).Append("\n");
            sb.Append("  Csflevel: ").Append(Csflevel).Append("\n");
            sb.Append("  Depid: ").Append(Depid).Append("\n");
            sb.Append("  Depname: ").Append(Depname).Append("\n");
            sb.Append("  Deppath: ").Append(Deppath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepartmentSearchResUserInfo);
        }

        /// <summary>
        /// Returns true if DepartmentSearchResUserInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of DepartmentSearchResUserInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepartmentSearchResUserInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Userid == input.Userid ||
                    (this.Userid != null &&
                    this.Userid.Equals(input.Userid))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Mail == input.Mail ||
                    (this.Mail != null &&
                    this.Mail.Equals(input.Mail))
                ) && 
                (
                    this.Csflevel == input.Csflevel ||
                    (this.Csflevel != null &&
                    this.Csflevel.Equals(input.Csflevel))
                ) && 
                (
                    this.Depid == input.Depid ||
                    (this.Depid != null &&
                    this.Depid.Equals(input.Depid))
                ) && 
                (
                    this.Depname == input.Depname ||
                    (this.Depname != null &&
                    this.Depname.Equals(input.Depname))
                ) && 
                (
                    this.Deppath == input.Deppath ||
                    (this.Deppath != null &&
                    this.Deppath.Equals(input.Deppath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Userid != null)
                    hashCode = hashCode * 59 + this.Userid.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Mail != null)
                    hashCode = hashCode * 59 + this.Mail.GetHashCode();
                if (this.Csflevel != null)
                    hashCode = hashCode * 59 + this.Csflevel.GetHashCode();
                if (this.Depid != null)
                    hashCode = hashCode * 59 + this.Depid.GetHashCode();
                if (this.Depname != null)
                    hashCode = hashCode * 59 + this.Depname.GetHashCode();
                if (this.Deppath != null)
                    hashCode = hashCode * 59 + this.Deppath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
