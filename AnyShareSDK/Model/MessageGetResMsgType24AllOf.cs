/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// MessageGetResMsgType24AllOf
    /// </summary>
    [DataContract]
    public partial class MessageGetResMsgType24AllOf :  IEquatable<MessageGetResMsgType24AllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageGetResMsgType24AllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageGetResMsgType24AllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageGetResMsgType24AllOf" /> class.
        /// </summary>
        /// <param name="allowvalue">允许的权限值，按bit为存储，参考权限获取 (required).</param>
        /// <param name="denyvalue">拒绝的权限值，按bit为存储，参考权限获取 (required).</param>
        /// <param name="end">有效到期时间 (unix utc 精确到微秒)  -1 无限期 (required).</param>
        /// <param name="taskdirname">任务目录名 (required).</param>
        public MessageGetResMsgType24AllOf(long? allowvalue = default(long?), long? denyvalue = default(long?), long? end = default(long?), string taskdirname = default(string))
        {
            this.Allowvalue = allowvalue;
            this.Denyvalue = denyvalue;
            this.End = end;
            this.Taskdirname = taskdirname;
        }
        
        /// <summary>
        /// 允许的权限值，按bit为存储，参考权限获取
        /// </summary>
        /// <value>允许的权限值，按bit为存储，参考权限获取</value>
        [DataMember(Name="allowvalue", EmitDefaultValue=false)]
        public long? Allowvalue { get; set; }

        /// <summary>
        /// 拒绝的权限值，按bit为存储，参考权限获取
        /// </summary>
        /// <value>拒绝的权限值，按bit为存储，参考权限获取</value>
        [DataMember(Name="denyvalue", EmitDefaultValue=false)]
        public long? Denyvalue { get; set; }

        /// <summary>
        /// 有效到期时间 (unix utc 精确到微秒)  -1 无限期
        /// </summary>
        /// <value>有效到期时间 (unix utc 精确到微秒)  -1 无限期</value>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public long? End { get; set; }

        /// <summary>
        /// 任务目录名
        /// </summary>
        /// <value>任务目录名</value>
        [DataMember(Name="taskdirname", EmitDefaultValue=false)]
        public string Taskdirname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageGetResMsgType24AllOf {\n");
            sb.Append("  Allowvalue: ").Append(Allowvalue).Append("\n");
            sb.Append("  Denyvalue: ").Append(Denyvalue).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Taskdirname: ").Append(Taskdirname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageGetResMsgType24AllOf);
        }

        /// <summary>
        /// Returns true if MessageGetResMsgType24AllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageGetResMsgType24AllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageGetResMsgType24AllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Allowvalue == input.Allowvalue ||
                    (this.Allowvalue != null &&
                    this.Allowvalue.Equals(input.Allowvalue))
                ) && 
                (
                    this.Denyvalue == input.Denyvalue ||
                    (this.Denyvalue != null &&
                    this.Denyvalue.Equals(input.Denyvalue))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Taskdirname == input.Taskdirname ||
                    (this.Taskdirname != null &&
                    this.Taskdirname.Equals(input.Taskdirname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Allowvalue != null)
                    hashCode = hashCode * 59 + this.Allowvalue.GetHashCode();
                if (this.Denyvalue != null)
                    hashCode = hashCode * 59 + this.Denyvalue.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.Taskdirname != null)
                    hashCode = hashCode * 59 + this.Taskdirname.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
