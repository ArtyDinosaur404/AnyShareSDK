/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// AuditGetpendingapprovalscountsRes
    /// </summary>
    [DataContract]
    public partial class AuditGetpendingapprovalscountsRes :  IEquatable<AuditGetpendingapprovalscountsRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditGetpendingapprovalscountsRes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuditGetpendingapprovalscountsRes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditGetpendingapprovalscountsRes" /> class.
        /// </summary>
        /// <param name="counts">待审核的记录总数 (required).</param>
        /// <param name="csfauditcount">待审核的定密审核数 (required).</param>
        /// <param name="docauditcount">待审核的流程审核数 (required).</param>
        /// <param name="pemcount">待审核的共享审核数（包含定密审核） (required).</param>
        /// <param name="shareauditcount">待审核的共享审核数（不包含定密审核） (required).</param>
        public AuditGetpendingapprovalscountsRes(long? counts = default(long?), long? csfauditcount = default(long?), long? docauditcount = default(long?), long? pemcount = default(long?), long? shareauditcount = default(long?))
        {
            this.Counts = counts;
            this.Csfauditcount = csfauditcount;
            this.Docauditcount = docauditcount;
            this.Pemcount = pemcount;
            this.Shareauditcount = shareauditcount;
        }
        
        /// <summary>
        /// 待审核的记录总数
        /// </summary>
        /// <value>待审核的记录总数</value>
        [DataMember(Name="counts", EmitDefaultValue=false)]
        public long? Counts { get; set; }

        /// <summary>
        /// 待审核的定密审核数
        /// </summary>
        /// <value>待审核的定密审核数</value>
        [DataMember(Name="csfauditcount", EmitDefaultValue=false)]
        public long? Csfauditcount { get; set; }

        /// <summary>
        /// 待审核的流程审核数
        /// </summary>
        /// <value>待审核的流程审核数</value>
        [DataMember(Name="docauditcount", EmitDefaultValue=false)]
        public long? Docauditcount { get; set; }

        /// <summary>
        /// 待审核的共享审核数（包含定密审核）
        /// </summary>
        /// <value>待审核的共享审核数（包含定密审核）</value>
        [DataMember(Name="pemcount", EmitDefaultValue=false)]
        public long? Pemcount { get; set; }

        /// <summary>
        /// 待审核的共享审核数（不包含定密审核）
        /// </summary>
        /// <value>待审核的共享审核数（不包含定密审核）</value>
        [DataMember(Name="shareauditcount", EmitDefaultValue=false)]
        public long? Shareauditcount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditGetpendingapprovalscountsRes {\n");
            sb.Append("  Counts: ").Append(Counts).Append("\n");
            sb.Append("  Csfauditcount: ").Append(Csfauditcount).Append("\n");
            sb.Append("  Docauditcount: ").Append(Docauditcount).Append("\n");
            sb.Append("  Pemcount: ").Append(Pemcount).Append("\n");
            sb.Append("  Shareauditcount: ").Append(Shareauditcount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditGetpendingapprovalscountsRes);
        }

        /// <summary>
        /// Returns true if AuditGetpendingapprovalscountsRes instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditGetpendingapprovalscountsRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditGetpendingapprovalscountsRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Counts == input.Counts ||
                    (this.Counts != null &&
                    this.Counts.Equals(input.Counts))
                ) && 
                (
                    this.Csfauditcount == input.Csfauditcount ||
                    (this.Csfauditcount != null &&
                    this.Csfauditcount.Equals(input.Csfauditcount))
                ) && 
                (
                    this.Docauditcount == input.Docauditcount ||
                    (this.Docauditcount != null &&
                    this.Docauditcount.Equals(input.Docauditcount))
                ) && 
                (
                    this.Pemcount == input.Pemcount ||
                    (this.Pemcount != null &&
                    this.Pemcount.Equals(input.Pemcount))
                ) && 
                (
                    this.Shareauditcount == input.Shareauditcount ||
                    (this.Shareauditcount != null &&
                    this.Shareauditcount.Equals(input.Shareauditcount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Counts != null)
                    hashCode = hashCode * 59 + this.Counts.GetHashCode();
                if (this.Csfauditcount != null)
                    hashCode = hashCode * 59 + this.Csfauditcount.GetHashCode();
                if (this.Docauditcount != null)
                    hashCode = hashCode * 59 + this.Docauditcount.GetHashCode();
                if (this.Pemcount != null)
                    hashCode = hashCode * 59 + this.Pemcount.GetHashCode();
                if (this.Shareauditcount != null)
                    hashCode = hashCode * 59 + this.Shareauditcount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
