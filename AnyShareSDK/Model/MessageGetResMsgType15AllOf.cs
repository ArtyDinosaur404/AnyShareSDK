/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// MessageGetResMsgType15AllOf
    /// </summary>
    [DataContract]
    public partial class MessageGetResMsgType15AllOf :  IEquatable<MessageGetResMsgType15AllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageGetResMsgType15AllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageGetResMsgType15AllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageGetResMsgType15AllOf" /> class.
        /// </summary>
        /// <param name="docaudittype">审核模式 (required).</param>
        /// <param name="previousauditor">上一级审核员名称，如果为“”，表示没有上级审核员 (required).</param>
        /// <param name="processname">文档流程名称 (required).</param>
        /// <param name="requestername">流程申请者名称 (required).</param>
        public MessageGetResMsgType15AllOf(long? docaudittype = default(long?), string previousauditor = default(string), string processname = default(string), string requestername = default(string))
        {
            this.Docaudittype = docaudittype;
            this.Previousauditor = previousauditor;
            this.Processname = processname;
            this.Requestername = requestername;
        }
        
        /// <summary>
        /// 审核模式
        /// </summary>
        /// <value>审核模式</value>
        [DataMember(Name="docaudittype", EmitDefaultValue=false)]
        public long? Docaudittype { get; set; }

        /// <summary>
        /// 上一级审核员名称，如果为“”，表示没有上级审核员
        /// </summary>
        /// <value>上一级审核员名称，如果为“”，表示没有上级审核员</value>
        [DataMember(Name="previousauditor", EmitDefaultValue=false)]
        public string Previousauditor { get; set; }

        /// <summary>
        /// 文档流程名称
        /// </summary>
        /// <value>文档流程名称</value>
        [DataMember(Name="processname", EmitDefaultValue=false)]
        public string Processname { get; set; }

        /// <summary>
        /// 流程申请者名称
        /// </summary>
        /// <value>流程申请者名称</value>
        [DataMember(Name="requestername", EmitDefaultValue=false)]
        public string Requestername { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageGetResMsgType15AllOf {\n");
            sb.Append("  Docaudittype: ").Append(Docaudittype).Append("\n");
            sb.Append("  Previousauditor: ").Append(Previousauditor).Append("\n");
            sb.Append("  Processname: ").Append(Processname).Append("\n");
            sb.Append("  Requestername: ").Append(Requestername).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageGetResMsgType15AllOf);
        }

        /// <summary>
        /// Returns true if MessageGetResMsgType15AllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageGetResMsgType15AllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageGetResMsgType15AllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Docaudittype == input.Docaudittype ||
                    (this.Docaudittype != null &&
                    this.Docaudittype.Equals(input.Docaudittype))
                ) && 
                (
                    this.Previousauditor == input.Previousauditor ||
                    (this.Previousauditor != null &&
                    this.Previousauditor.Equals(input.Previousauditor))
                ) && 
                (
                    this.Processname == input.Processname ||
                    (this.Processname != null &&
                    this.Processname.Equals(input.Processname))
                ) && 
                (
                    this.Requestername == input.Requestername ||
                    (this.Requestername != null &&
                    this.Requestername.Equals(input.Requestername))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Docaudittype != null)
                    hashCode = hashCode * 59 + this.Docaudittype.GetHashCode();
                if (this.Previousauditor != null)
                    hashCode = hashCode * 59 + this.Previousauditor.GetHashCode();
                if (this.Processname != null)
                    hashCode = hashCode * 59 + this.Processname.GetHashCode();
                if (this.Requestername != null)
                    hashCode = hashCode * 59 + this.Requestername.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
