/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// RecycleListReq
    /// </summary>
    [DataContract]
    public partial class RecycleListReq :  IEquatable<RecycleListReq>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecycleListReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecycleListReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecycleListReq" /> class.
        /// </summary>
        /// <param name="docid">个人文档或者文档库的gns路径 (required).</param>
        /// <param name="name">按照文件名查找，默认为空，不进行过滤.</param>
        /// <param name="by">指定按哪个字段排序  若不指定，默认按docid升序排序  说明：  name，按文件名称（中文按拼音）排序  type，按文件类型排序（目录按name升序）  time，按删除时间排序  .</param>
        /// <param name="sort">升序还是降序，默认为升序  说明：  asc，升序  desc，降序  .</param>
        /// <param name="path">按照原位置查找，默认为空，不进行过滤.</param>
        /// <param name="editor">按照删除者查找，默认为空，不进行过滤.</param>
        /// <param name="start">开始位置，默认为0.</param>
        /// <param name="limit">分页条数，默认为-1，返回start后面的所有记录.</param>
        public RecycleListReq(string docid = default(string), List<string> name = default(List<string>), string by = default(string), string sort = default(string), List<string> path = default(List<string>), List<string> editor = default(List<string>), long? start = default(long?), long? limit = default(long?))
        {
            this.Docid = docid;
            this.Name = name;
            this.By = by;
            this.Sort = sort;
            this.Path = path;
            this.Editor = editor;
            this.Start = start;
            this.Limit = limit;
        }
        
        /// <summary>
        /// 个人文档或者文档库的gns路径
        /// </summary>
        /// <value>个人文档或者文档库的gns路径</value>
        [DataMember(Name="docid", EmitDefaultValue=false)]
        public string Docid { get; set; }

        /// <summary>
        /// 按照文件名查找，默认为空，不进行过滤
        /// </summary>
        /// <value>按照文件名查找，默认为空，不进行过滤</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public List<string> Name { get; set; }

        /// <summary>
        /// 指定按哪个字段排序  若不指定，默认按docid升序排序  说明：  name，按文件名称（中文按拼音）排序  type，按文件类型排序（目录按name升序）  time，按删除时间排序  
        /// </summary>
        /// <value>指定按哪个字段排序  若不指定，默认按docid升序排序  说明：  name，按文件名称（中文按拼音）排序  type，按文件类型排序（目录按name升序）  time，按删除时间排序  </value>
        [DataMember(Name="by", EmitDefaultValue=false)]
        public string By { get; set; }

        /// <summary>
        /// 升序还是降序，默认为升序  说明：  asc，升序  desc，降序  
        /// </summary>
        /// <value>升序还是降序，默认为升序  说明：  asc，升序  desc，降序  </value>
        [DataMember(Name="sort", EmitDefaultValue=false)]
        public string Sort { get; set; }

        /// <summary>
        /// 按照原位置查找，默认为空，不进行过滤
        /// </summary>
        /// <value>按照原位置查找，默认为空，不进行过滤</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public List<string> Path { get; set; }

        /// <summary>
        /// 按照删除者查找，默认为空，不进行过滤
        /// </summary>
        /// <value>按照删除者查找，默认为空，不进行过滤</value>
        [DataMember(Name="editor", EmitDefaultValue=false)]
        public List<string> Editor { get; set; }

        /// <summary>
        /// 开始位置，默认为0
        /// </summary>
        /// <value>开始位置，默认为0</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public long? Start { get; set; }

        /// <summary>
        /// 分页条数，默认为-1，返回start后面的所有记录
        /// </summary>
        /// <value>分页条数，默认为-1，返回start后面的所有记录</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public long? Limit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecycleListReq {\n");
            sb.Append("  Docid: ").Append(Docid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  By: ").Append(By).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Editor: ").Append(Editor).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecycleListReq);
        }

        /// <summary>
        /// Returns true if RecycleListReq instances are equal
        /// </summary>
        /// <param name="input">Instance of RecycleListReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecycleListReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Docid == input.Docid ||
                    (this.Docid != null &&
                    this.Docid.Equals(input.Docid))
                ) && 
                (
                    this.Name == input.Name ||
                    this.Name != null &&
                    input.Name != null &&
                    this.Name.SequenceEqual(input.Name)
                ) && 
                (
                    this.By == input.By ||
                    (this.By != null &&
                    this.By.Equals(input.By))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.Path == input.Path ||
                    this.Path != null &&
                    input.Path != null &&
                    this.Path.SequenceEqual(input.Path)
                ) && 
                (
                    this.Editor == input.Editor ||
                    this.Editor != null &&
                    input.Editor != null &&
                    this.Editor.SequenceEqual(input.Editor)
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Docid != null)
                    hashCode = hashCode * 59 + this.Docid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.By != null)
                    hashCode = hashCode * 59 + this.By.GetHashCode();
                if (this.Sort != null)
                    hashCode = hashCode * 59 + this.Sort.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Editor != null)
                    hashCode = hashCode * 59 + this.Editor.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
