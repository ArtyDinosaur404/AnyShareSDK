/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// FileMetadataRes
    /// </summary>
    [DataContract]
    public partial class FileMetadataRes :  IEquatable<FileMetadataRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileMetadataRes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileMetadataRes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileMetadataRes" /> class.
        /// </summary>
        /// <param name="clientMtime">由客户端设置的文件本地修改时间    若未设置，返回modified的值   (required).</param>
        /// <param name="editor">文件版本上传编辑者名称，UTF8编码 (required).</param>
        /// <param name="modified">文件版本上传时间，UTC时间，此为上传版本时的服务器时间 (required).</param>
        /// <param name="name">文件版本上传时文件名称，UTF8编码 (required).</param>
        /// <param name="rev">文件版本ID (required).</param>
        /// <param name="site">文件版本的归属站点 (required).</param>
        /// <param name="size">文件版本的大小 (required).</param>
        /// <param name="tags">版本的标签，字符串数组 (required).</param>
        /// <param name="needdownloadwatermark">用户下载文件对象时，是否需要下载水印 (required).</param>
        /// <param name="docid">文件docid (required).</param>
        public FileMetadataRes(long? clientMtime = default(long?), string editor = default(string), long? modified = default(long?), string name = default(string), string rev = default(string), string site = default(string), long? size = default(long?), List<string> tags = default(List<string>), bool? needdownloadwatermark = default(bool?), string docid = default(string))
        {
            this.ClientMtime = clientMtime;
            this.Editor = editor;
            this.Modified = modified;
            this.Name = name;
            this.Rev = rev;
            this.Site = site;
            this.Size = size;
            this.Tags = tags;
            this.Needdownloadwatermark = needdownloadwatermark;
            this.Docid = docid;
        }
        
        /// <summary>
        /// 由客户端设置的文件本地修改时间    若未设置，返回modified的值  
        /// </summary>
        /// <value>由客户端设置的文件本地修改时间    若未设置，返回modified的值  </value>
        [DataMember(Name="client_mtime", EmitDefaultValue=false)]
        public long? ClientMtime { get; set; }

        /// <summary>
        /// 文件版本上传编辑者名称，UTF8编码
        /// </summary>
        /// <value>文件版本上传编辑者名称，UTF8编码</value>
        [DataMember(Name="editor", EmitDefaultValue=false)]
        public string Editor { get; set; }

        /// <summary>
        /// 文件版本上传时间，UTC时间，此为上传版本时的服务器时间
        /// </summary>
        /// <value>文件版本上传时间，UTC时间，此为上传版本时的服务器时间</value>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public long? Modified { get; set; }

        /// <summary>
        /// 文件版本上传时文件名称，UTF8编码
        /// </summary>
        /// <value>文件版本上传时文件名称，UTF8编码</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 文件版本ID
        /// </summary>
        /// <value>文件版本ID</value>
        [DataMember(Name="rev", EmitDefaultValue=false)]
        public string Rev { get; set; }

        /// <summary>
        /// 文件版本的归属站点
        /// </summary>
        /// <value>文件版本的归属站点</value>
        [DataMember(Name="site", EmitDefaultValue=false)]
        public string Site { get; set; }

        /// <summary>
        /// 文件版本的大小
        /// </summary>
        /// <value>文件版本的大小</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public long? Size { get; set; }

        /// <summary>
        /// 版本的标签，字符串数组
        /// </summary>
        /// <value>版本的标签，字符串数组</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// 用户下载文件对象时，是否需要下载水印
        /// </summary>
        /// <value>用户下载文件对象时，是否需要下载水印</value>
        [DataMember(Name="needdownloadwatermark", EmitDefaultValue=false)]
        public bool? Needdownloadwatermark { get; set; }

        /// <summary>
        /// 文件docid
        /// </summary>
        /// <value>文件docid</value>
        [DataMember(Name="docid", EmitDefaultValue=false)]
        public string Docid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileMetadataRes {\n");
            sb.Append("  ClientMtime: ").Append(ClientMtime).Append("\n");
            sb.Append("  Editor: ").Append(Editor).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rev: ").Append(Rev).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Needdownloadwatermark: ").Append(Needdownloadwatermark).Append("\n");
            sb.Append("  Docid: ").Append(Docid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileMetadataRes);
        }

        /// <summary>
        /// Returns true if FileMetadataRes instances are equal
        /// </summary>
        /// <param name="input">Instance of FileMetadataRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileMetadataRes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ClientMtime == input.ClientMtime ||
                    (this.ClientMtime != null &&
                    this.ClientMtime.Equals(input.ClientMtime))
                ) && 
                (
                    this.Editor == input.Editor ||
                    (this.Editor != null &&
                    this.Editor.Equals(input.Editor))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Rev == input.Rev ||
                    (this.Rev != null &&
                    this.Rev.Equals(input.Rev))
                ) && 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Needdownloadwatermark == input.Needdownloadwatermark ||
                    (this.Needdownloadwatermark != null &&
                    this.Needdownloadwatermark.Equals(input.Needdownloadwatermark))
                ) && 
                (
                    this.Docid == input.Docid ||
                    (this.Docid != null &&
                    this.Docid.Equals(input.Docid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientMtime != null)
                    hashCode = hashCode * 59 + this.ClientMtime.GetHashCode();
                if (this.Editor != null)
                    hashCode = hashCode * 59 + this.Editor.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Rev != null)
                    hashCode = hashCode * 59 + this.Rev.GetHashCode();
                if (this.Site != null)
                    hashCode = hashCode * 59 + this.Site.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Needdownloadwatermark != null)
                    hashCode = hashCode * 59 + this.Needdownloadwatermark.GetHashCode();
                if (this.Docid != null)
                    hashCode = hashCode * 59 + this.Docid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
