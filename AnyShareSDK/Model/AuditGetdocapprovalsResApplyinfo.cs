/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// AuditGetdocapprovalsResApplyinfo
    /// </summary>
    [DataContract]
    public partial class AuditGetdocapprovalsResApplyinfo :  IEquatable<AuditGetdocapprovalsResApplyinfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditGetdocapprovalsResApplyinfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuditGetdocapprovalsResApplyinfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditGetdocapprovalsResApplyinfo" /> class.
        /// </summary>
        /// <param name="applyid">申请记录id (required).</param>
        /// <param name="applymsg">发起流程时的理由 (required).</param>
        /// <param name="auditornames">审核员的名称  [0, auditprogress）表示已审核过的名称  [auditprogress, ]表示尚未审核过的名称 (required).</param>
        /// <param name="auditprogress">审核进度，表示当前审核员在auditornames中的位置  同级审核，该字段为0  汇签审核，逐级审核，参考auditornames (required).</param>
        /// <param name="audittype">审核模式  1表示同级审核  2表示汇签审核  3表示逐级审核 (required).</param>
        /// <param name="createdate">申请时间（微秒时间戳） (required).</param>
        /// <param name="csflevel">文件密级,5~15，如果是文件夹，则为0 (required).</param>
        /// <param name="docid">文档gns路径 (required).</param>
        /// <param name="docname">文档名称 (required).</param>
        /// <param name="isdir">是否为文件夹 (required).</param>
        /// <param name="processname">流程名称 (required).</param>
        /// <param name="creatorname">申请者名称 (required).</param>
        public AuditGetdocapprovalsResApplyinfo(string applyid = default(string), string applymsg = default(string), List<string> auditornames = default(List<string>), long? auditprogress = default(long?), long? audittype = default(long?), long? createdate = default(long?), long? csflevel = default(long?), string docid = default(string), string docname = default(string), bool? isdir = default(bool?), string processname = default(string), string creatorname = default(string))
        {
            this.Applyid = applyid;
            this.Applymsg = applymsg;
            this.Auditornames = auditornames;
            this.Auditprogress = auditprogress;
            this.Audittype = audittype;
            this.Createdate = createdate;
            this.Csflevel = csflevel;
            this.Docid = docid;
            this.Docname = docname;
            this.Isdir = isdir;
            this.Processname = processname;
            this.Creatorname = creatorname;
        }
        
        /// <summary>
        /// 申请记录id
        /// </summary>
        /// <value>申请记录id</value>
        [DataMember(Name="applyid", EmitDefaultValue=false)]
        public string Applyid { get; set; }

        /// <summary>
        /// 发起流程时的理由
        /// </summary>
        /// <value>发起流程时的理由</value>
        [DataMember(Name="applymsg", EmitDefaultValue=false)]
        public string Applymsg { get; set; }

        /// <summary>
        /// 审核员的名称  [0, auditprogress）表示已审核过的名称  [auditprogress, ]表示尚未审核过的名称
        /// </summary>
        /// <value>审核员的名称  [0, auditprogress）表示已审核过的名称  [auditprogress, ]表示尚未审核过的名称</value>
        [DataMember(Name="auditornames", EmitDefaultValue=false)]
        public List<string> Auditornames { get; set; }

        /// <summary>
        /// 审核进度，表示当前审核员在auditornames中的位置  同级审核，该字段为0  汇签审核，逐级审核，参考auditornames
        /// </summary>
        /// <value>审核进度，表示当前审核员在auditornames中的位置  同级审核，该字段为0  汇签审核，逐级审核，参考auditornames</value>
        [DataMember(Name="auditprogress", EmitDefaultValue=false)]
        public long? Auditprogress { get; set; }

        /// <summary>
        /// 审核模式  1表示同级审核  2表示汇签审核  3表示逐级审核
        /// </summary>
        /// <value>审核模式  1表示同级审核  2表示汇签审核  3表示逐级审核</value>
        [DataMember(Name="audittype", EmitDefaultValue=false)]
        public long? Audittype { get; set; }

        /// <summary>
        /// 申请时间（微秒时间戳）
        /// </summary>
        /// <value>申请时间（微秒时间戳）</value>
        [DataMember(Name="createdate", EmitDefaultValue=false)]
        public long? Createdate { get; set; }

        /// <summary>
        /// 文件密级,5~15，如果是文件夹，则为0
        /// </summary>
        /// <value>文件密级,5~15，如果是文件夹，则为0</value>
        [DataMember(Name="csflevel", EmitDefaultValue=false)]
        public long? Csflevel { get; set; }

        /// <summary>
        /// 文档gns路径
        /// </summary>
        /// <value>文档gns路径</value>
        [DataMember(Name="docid", EmitDefaultValue=false)]
        public string Docid { get; set; }

        /// <summary>
        /// 文档名称
        /// </summary>
        /// <value>文档名称</value>
        [DataMember(Name="docname", EmitDefaultValue=false)]
        public string Docname { get; set; }

        /// <summary>
        /// 是否为文件夹
        /// </summary>
        /// <value>是否为文件夹</value>
        [DataMember(Name="isdir", EmitDefaultValue=false)]
        public bool? Isdir { get; set; }

        /// <summary>
        /// 流程名称
        /// </summary>
        /// <value>流程名称</value>
        [DataMember(Name="processname", EmitDefaultValue=false)]
        public string Processname { get; set; }

        /// <summary>
        /// 申请者名称
        /// </summary>
        /// <value>申请者名称</value>
        [DataMember(Name="creatorname", EmitDefaultValue=false)]
        public string Creatorname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditGetdocapprovalsResApplyinfo {\n");
            sb.Append("  Applyid: ").Append(Applyid).Append("\n");
            sb.Append("  Applymsg: ").Append(Applymsg).Append("\n");
            sb.Append("  Auditornames: ").Append(Auditornames).Append("\n");
            sb.Append("  Auditprogress: ").Append(Auditprogress).Append("\n");
            sb.Append("  Audittype: ").Append(Audittype).Append("\n");
            sb.Append("  Createdate: ").Append(Createdate).Append("\n");
            sb.Append("  Csflevel: ").Append(Csflevel).Append("\n");
            sb.Append("  Docid: ").Append(Docid).Append("\n");
            sb.Append("  Docname: ").Append(Docname).Append("\n");
            sb.Append("  Isdir: ").Append(Isdir).Append("\n");
            sb.Append("  Processname: ").Append(Processname).Append("\n");
            sb.Append("  Creatorname: ").Append(Creatorname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditGetdocapprovalsResApplyinfo);
        }

        /// <summary>
        /// Returns true if AuditGetdocapprovalsResApplyinfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditGetdocapprovalsResApplyinfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditGetdocapprovalsResApplyinfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Applyid == input.Applyid ||
                    (this.Applyid != null &&
                    this.Applyid.Equals(input.Applyid))
                ) && 
                (
                    this.Applymsg == input.Applymsg ||
                    (this.Applymsg != null &&
                    this.Applymsg.Equals(input.Applymsg))
                ) && 
                (
                    this.Auditornames == input.Auditornames ||
                    this.Auditornames != null &&
                    input.Auditornames != null &&
                    this.Auditornames.SequenceEqual(input.Auditornames)
                ) && 
                (
                    this.Auditprogress == input.Auditprogress ||
                    (this.Auditprogress != null &&
                    this.Auditprogress.Equals(input.Auditprogress))
                ) && 
                (
                    this.Audittype == input.Audittype ||
                    (this.Audittype != null &&
                    this.Audittype.Equals(input.Audittype))
                ) && 
                (
                    this.Createdate == input.Createdate ||
                    (this.Createdate != null &&
                    this.Createdate.Equals(input.Createdate))
                ) && 
                (
                    this.Csflevel == input.Csflevel ||
                    (this.Csflevel != null &&
                    this.Csflevel.Equals(input.Csflevel))
                ) && 
                (
                    this.Docid == input.Docid ||
                    (this.Docid != null &&
                    this.Docid.Equals(input.Docid))
                ) && 
                (
                    this.Docname == input.Docname ||
                    (this.Docname != null &&
                    this.Docname.Equals(input.Docname))
                ) && 
                (
                    this.Isdir == input.Isdir ||
                    (this.Isdir != null &&
                    this.Isdir.Equals(input.Isdir))
                ) && 
                (
                    this.Processname == input.Processname ||
                    (this.Processname != null &&
                    this.Processname.Equals(input.Processname))
                ) && 
                (
                    this.Creatorname == input.Creatorname ||
                    (this.Creatorname != null &&
                    this.Creatorname.Equals(input.Creatorname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Applyid != null)
                    hashCode = hashCode * 59 + this.Applyid.GetHashCode();
                if (this.Applymsg != null)
                    hashCode = hashCode * 59 + this.Applymsg.GetHashCode();
                if (this.Auditornames != null)
                    hashCode = hashCode * 59 + this.Auditornames.GetHashCode();
                if (this.Auditprogress != null)
                    hashCode = hashCode * 59 + this.Auditprogress.GetHashCode();
                if (this.Audittype != null)
                    hashCode = hashCode * 59 + this.Audittype.GetHashCode();
                if (this.Createdate != null)
                    hashCode = hashCode * 59 + this.Createdate.GetHashCode();
                if (this.Csflevel != null)
                    hashCode = hashCode * 59 + this.Csflevel.GetHashCode();
                if (this.Docid != null)
                    hashCode = hashCode * 59 + this.Docid.GetHashCode();
                if (this.Docname != null)
                    hashCode = hashCode * 59 + this.Docname.GetHashCode();
                if (this.Isdir != null)
                    hashCode = hashCode * 59 + this.Isdir.GetHashCode();
                if (this.Processname != null)
                    hashCode = hashCode * 59 + this.Processname.GetHashCode();
                if (this.Creatorname != null)
                    hashCode = hashCode * 59 + this.Creatorname.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
