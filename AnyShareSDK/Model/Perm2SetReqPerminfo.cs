/* 
 * 6.0-OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// Perm2SetReqPerminfo
    /// </summary>
    [DataContract]
    public partial class Perm2SetReqPerminfo :  IEquatable<Perm2SetReqPerminfo>, IValidatableObject
    {
        /// <summary>
        /// 访问者类型
        /// </summary>
        /// <value>访问者类型</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccessortypeEnum
        {
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 1,

            /// <summary>
            /// Enum Department for value: department
            /// </summary>
            [EnumMember(Value = "department")]
            Department = 2,

            /// <summary>
            /// Enum Contactor for value: contactor
            /// </summary>
            [EnumMember(Value = "contactor")]
            Contactor = 3

        }

        /// <summary>
        /// 访问者类型
        /// </summary>
        /// <value>访问者类型</value>
        [DataMember(Name="accessortype", EmitDefaultValue=false)]
        public AccessortypeEnum Accessortype { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Perm2SetReqPerminfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Perm2SetReqPerminfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Perm2SetReqPerminfo" /> class.
        /// </summary>
        /// <param name="accessorid">访问者id，可能是用户、部门、联系人 (required).</param>
        /// <param name="accessortype">访问者类型 (required).</param>
        /// <param name="denyvalue">拒绝权限  权限值，按bit位存储  0x00000000，未设置  0x00000001，显示  0x00000002，预览  0x00000004，下载  0x00000008，新建  0x00000010，修改  0x00000020，删除  0x00000040，复制   (required).</param>
        /// <param name="allowvalue">允许权限，值与denyvalue相同 (required).</param>
        /// <param name="endtime">权限到期时间，单位：微秒，-1表示无限期 (required).</param>
        /// <param name="inheritpath">值为非空字符串时，忽略该条权限.</param>
        public Perm2SetReqPerminfo(string accessorid = default(string), AccessortypeEnum accessortype = default(AccessortypeEnum), long? denyvalue = default(long?), long? allowvalue = default(long?), long? endtime = default(long?), string inheritpath = default(string))
        {
            this.Accessorid = accessorid;
            this.Accessortype = accessortype;
            this.Denyvalue = denyvalue;
            this.Allowvalue = allowvalue;
            this.Endtime = endtime;
            this.Inheritpath = inheritpath;
        }
        
        /// <summary>
        /// 访问者id，可能是用户、部门、联系人
        /// </summary>
        /// <value>访问者id，可能是用户、部门、联系人</value>
        [DataMember(Name="accessorid", EmitDefaultValue=false)]
        public string Accessorid { get; set; }


        /// <summary>
        /// 拒绝权限  权限值，按bit位存储  0x00000000，未设置  0x00000001，显示  0x00000002，预览  0x00000004，下载  0x00000008，新建  0x00000010，修改  0x00000020，删除  0x00000040，复制  
        /// </summary>
        /// <value>拒绝权限  权限值，按bit位存储  0x00000000，未设置  0x00000001，显示  0x00000002，预览  0x00000004，下载  0x00000008，新建  0x00000010，修改  0x00000020，删除  0x00000040，复制  </value>
        [DataMember(Name="denyvalue", EmitDefaultValue=false)]
        public long? Denyvalue { get; set; }

        /// <summary>
        /// 允许权限，值与denyvalue相同
        /// </summary>
        /// <value>允许权限，值与denyvalue相同</value>
        [DataMember(Name="allowvalue", EmitDefaultValue=false)]
        public long? Allowvalue { get; set; }

        /// <summary>
        /// 权限到期时间，单位：微秒，-1表示无限期
        /// </summary>
        /// <value>权限到期时间，单位：微秒，-1表示无限期</value>
        [DataMember(Name="endtime", EmitDefaultValue=false)]
        public long? Endtime { get; set; }

        /// <summary>
        /// 值为非空字符串时，忽略该条权限
        /// </summary>
        /// <value>值为非空字符串时，忽略该条权限</value>
        [DataMember(Name="inheritpath", EmitDefaultValue=false)]
        public string Inheritpath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Perm2SetReqPerminfo {\n");
            sb.Append("  Accessorid: ").Append(Accessorid).Append("\n");
            sb.Append("  Accessortype: ").Append(Accessortype).Append("\n");
            sb.Append("  Denyvalue: ").Append(Denyvalue).Append("\n");
            sb.Append("  Allowvalue: ").Append(Allowvalue).Append("\n");
            sb.Append("  Endtime: ").Append(Endtime).Append("\n");
            sb.Append("  Inheritpath: ").Append(Inheritpath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Perm2SetReqPerminfo);
        }

        /// <summary>
        /// Returns true if Perm2SetReqPerminfo instances are equal
        /// </summary>
        /// <param name="input">Instance of Perm2SetReqPerminfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Perm2SetReqPerminfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Accessorid == input.Accessorid ||
                    (this.Accessorid != null &&
                    this.Accessorid.Equals(input.Accessorid))
                ) && 
                (
                    this.Accessortype == input.Accessortype ||
                    (this.Accessortype != null &&
                    this.Accessortype.Equals(input.Accessortype))
                ) && 
                (
                    this.Denyvalue == input.Denyvalue ||
                    (this.Denyvalue != null &&
                    this.Denyvalue.Equals(input.Denyvalue))
                ) && 
                (
                    this.Allowvalue == input.Allowvalue ||
                    (this.Allowvalue != null &&
                    this.Allowvalue.Equals(input.Allowvalue))
                ) && 
                (
                    this.Endtime == input.Endtime ||
                    (this.Endtime != null &&
                    this.Endtime.Equals(input.Endtime))
                ) && 
                (
                    this.Inheritpath == input.Inheritpath ||
                    (this.Inheritpath != null &&
                    this.Inheritpath.Equals(input.Inheritpath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accessorid != null)
                    hashCode = hashCode * 59 + this.Accessorid.GetHashCode();
                if (this.Accessortype != null)
                    hashCode = hashCode * 59 + this.Accessortype.GetHashCode();
                if (this.Denyvalue != null)
                    hashCode = hashCode * 59 + this.Denyvalue.GetHashCode();
                if (this.Allowvalue != null)
                    hashCode = hashCode * 59 + this.Allowvalue.GetHashCode();
                if (this.Endtime != null)
                    hashCode = hashCode * 59 + this.Endtime.GetHashCode();
                if (this.Inheritpath != null)
                    hashCode = hashCode * 59 + this.Inheritpath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
