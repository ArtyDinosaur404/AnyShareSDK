/* 
 * OpenDoc_API-文档访问
 *
 * API to access AnyShare    如有任何疑问，可到开发者社区提问：https://developers.aishu.cn  # Authentication  - 调用需要鉴权的API，必须将token放在HTTP header中：\"Authorization: Bearer ACCESS_TOKEN\"  - 对于GET请求，除了将token放在HTTP header中，也可以将token放在URL query string中：\"tokenid=ACCESS_TOKEN\"  
 *
 * The version of the OpenAPI document: 6.0.10
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AnyShareSDK.Client.OpenAPIDateConverter;

namespace AnyShareSDK.Model
{
    /// <summary>
    /// FileOsuploadrefreshReq
    /// </summary>
    [DataContract]
    public partial class FileOsuploadrefreshReq :  IEquatable<FileOsuploadrefreshReq>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileOsuploadrefreshReq" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileOsuploadrefreshReq() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileOsuploadrefreshReq" /> class.
        /// </summary>
        /// <param name="docid">文件gns路径（创建协议返回） (required).</param>
        /// <param name="rev">文件版本号 (required).</param>
        /// <param name="length">默认为-1；    不为-1时，更新版本的length为参数值；  .</param>
        /// <param name="multiupload">- 默认为false  - 参数为true，返回大文件分片上传需要的uploadid  - 如果multiupload为false，length支持最大5G.</param>
        /// <param name="reqmethod">采用单文件上传方式向存储服务器上传数据时的请求方法。    默认为“PUT”；参数值“POST”表示使用POST表单的方式上传  .</param>
        /// <param name="reqhost">向存储服务器上传数据时的请求地址.</param>
        /// <param name="usehttps">- 上传是否使用https，默认为true - 该参数只对一体机自有对象存储EOSS生效.</param>
        public FileOsuploadrefreshReq(string docid = default(string), string rev = default(string), long? length = default(long?), bool? multiupload = default(bool?), string reqmethod = default(string), string reqhost = default(string), bool? usehttps = default(bool?))
        {
            this.Docid = docid;
            this.Rev = rev;
            this.Length = length;
            this.Multiupload = multiupload;
            this.Reqmethod = reqmethod;
            this.Reqhost = reqhost;
            this.Usehttps = usehttps;
        }
        
        /// <summary>
        /// 文件gns路径（创建协议返回）
        /// </summary>
        /// <value>文件gns路径（创建协议返回）</value>
        [DataMember(Name="docid", EmitDefaultValue=false)]
        public string Docid { get; set; }

        /// <summary>
        /// 文件版本号
        /// </summary>
        /// <value>文件版本号</value>
        [DataMember(Name="rev", EmitDefaultValue=false)]
        public string Rev { get; set; }

        /// <summary>
        /// 默认为-1；    不为-1时，更新版本的length为参数值；  
        /// </summary>
        /// <value>默认为-1；    不为-1时，更新版本的length为参数值；  </value>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public long? Length { get; set; }

        /// <summary>
        /// - 默认为false  - 参数为true，返回大文件分片上传需要的uploadid  - 如果multiupload为false，length支持最大5G
        /// </summary>
        /// <value>- 默认为false  - 参数为true，返回大文件分片上传需要的uploadid  - 如果multiupload为false，length支持最大5G</value>
        [DataMember(Name="multiupload", EmitDefaultValue=false)]
        public bool? Multiupload { get; set; }

        /// <summary>
        /// 采用单文件上传方式向存储服务器上传数据时的请求方法。    默认为“PUT”；参数值“POST”表示使用POST表单的方式上传  
        /// </summary>
        /// <value>采用单文件上传方式向存储服务器上传数据时的请求方法。    默认为“PUT”；参数值“POST”表示使用POST表单的方式上传  </value>
        [DataMember(Name="reqmethod", EmitDefaultValue=false)]
        public string Reqmethod { get; set; }

        /// <summary>
        /// 向存储服务器上传数据时的请求地址
        /// </summary>
        /// <value>向存储服务器上传数据时的请求地址</value>
        [DataMember(Name="reqhost", EmitDefaultValue=false)]
        public string Reqhost { get; set; }

        /// <summary>
        /// - 上传是否使用https，默认为true - 该参数只对一体机自有对象存储EOSS生效
        /// </summary>
        /// <value>- 上传是否使用https，默认为true - 该参数只对一体机自有对象存储EOSS生效</value>
        [DataMember(Name="usehttps", EmitDefaultValue=false)]
        public bool? Usehttps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileOsuploadrefreshReq {\n");
            sb.Append("  Docid: ").Append(Docid).Append("\n");
            sb.Append("  Rev: ").Append(Rev).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Multiupload: ").Append(Multiupload).Append("\n");
            sb.Append("  Reqmethod: ").Append(Reqmethod).Append("\n");
            sb.Append("  Reqhost: ").Append(Reqhost).Append("\n");
            sb.Append("  Usehttps: ").Append(Usehttps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileOsuploadrefreshReq);
        }

        /// <summary>
        /// Returns true if FileOsuploadrefreshReq instances are equal
        /// </summary>
        /// <param name="input">Instance of FileOsuploadrefreshReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileOsuploadrefreshReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Docid == input.Docid ||
                    (this.Docid != null &&
                    this.Docid.Equals(input.Docid))
                ) && 
                (
                    this.Rev == input.Rev ||
                    (this.Rev != null &&
                    this.Rev.Equals(input.Rev))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Multiupload == input.Multiupload ||
                    (this.Multiupload != null &&
                    this.Multiupload.Equals(input.Multiupload))
                ) && 
                (
                    this.Reqmethod == input.Reqmethod ||
                    (this.Reqmethod != null &&
                    this.Reqmethod.Equals(input.Reqmethod))
                ) && 
                (
                    this.Reqhost == input.Reqhost ||
                    (this.Reqhost != null &&
                    this.Reqhost.Equals(input.Reqhost))
                ) && 
                (
                    this.Usehttps == input.Usehttps ||
                    (this.Usehttps != null &&
                    this.Usehttps.Equals(input.Usehttps))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Docid != null)
                    hashCode = hashCode * 59 + this.Docid.GetHashCode();
                if (this.Rev != null)
                    hashCode = hashCode * 59 + this.Rev.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Multiupload != null)
                    hashCode = hashCode * 59 + this.Multiupload.GetHashCode();
                if (this.Reqmethod != null)
                    hashCode = hashCode * 59 + this.Reqmethod.GetHashCode();
                if (this.Reqhost != null)
                    hashCode = hashCode * 59 + this.Reqhost.GetHashCode();
                if (this.Usehttps != null)
                    hashCode = hashCode * 59 + this.Usehttps.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
